{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kitodo.Production Developer Documentation Read the docs: https://kitodo-production.readthedocs.io/en/latest/ GitHub: https://github.com/kitodo/kitodo-production/tree/master/docs This documentation is work in progress. Please consult the javadoc or contact the developer team if you have specific questions that are not covered here yet.","title":"Home"},{"location":"#kitodoproduction-developer-documentation","text":"Read the docs: https://kitodo-production.readthedocs.io/en/latest/ GitHub: https://github.com/kitodo/kitodo-production/tree/master/docs This documentation is work in progress. Please consult the javadoc or contact the developer team if you have specific questions that are not covered here yet.","title":"Kitodo.Production Developer Documentation"},{"location":"developer/api/","text":"Application Programming Interface (API) This documentation is work in progress. Please consult the javadoc or contact the developer team . Below you will find some fragments regarding the APIs of Kitodo.production: Active MQ webservices Jersey WebAPI","title":"Application Programming Interface (API)"},{"location":"developer/api/#application-programming-interface-api","text":"This documentation is work in progress. Please consult the javadoc or contact the developer team . Below you will find some fragments regarding the APIs of Kitodo.production: Active MQ webservices Jersey WebAPI","title":"Application Programming Interface (API)"},{"location":"developer/api/activemq_jms_api/","text":"Active MQ web services for Kitodo JMS Active Message Queue is an open source Java Messaging (JMS) implementation provided by the Apache Software Foundation. It is intended to be used to connect software components in a flexible way. The core is the Active MQ server which can be pictured like a post office. The mail boxes are named \u201cqueue\u201d or \u201ctopic\u201d. Queues work as expected: A producer sends a message where a consumer can pick it up. Topics can be pictured as black boards: The main difference is: A message read from a queue is removed from the queue. A message read from a topic is still available to others. Consumer clients can actively check the server or may register listeners with the server to be notified of new messages. API Implementation This behaviour has already been implemented to Kitodo: The org.goobi.mq. ActiveMQDirector is a ServletContextListener which is registered in web.xml. On application startup, it registers all consumers from its \u201cservices\u201d variable to the server configured in \u201cactiveMQ.hostURL\u201d. The elements of this variable are classes extending the abstract class ActiveMQProcessor. This class implements the MessageListener and provides facilities to handle exceptions and to store the consumer which is required on shutdown to disconnect. To implement another web service processor, you have to implement a class which extends ActiveMQProcessor and implements its abstract void process(MapMessage). Here is the right place to do whatever your processor is intended to do. There is a class MapMessageObjectReader which shall be used to type safe retrieve complex objects from MapMessages. You must add your new class to the \u201cservices\u201d variable of ActiveMQDirector then. The Kitodo server administrator shall be in control which processors are being started, and which queue names they listen on. Implementation of this configurability is designed this way: The implementing class must pass its queue name to the constructor of the parent class. This is done by implementing the constructor like in the following skeleton. If the queue name is not configured, it will return null which will prevent the ActiveMQDirector from registering it to the server. Inside the class, the queue name is available in the global variable \u201cqueueName\u201d which is set by the parent class. The implementation may use arbitrary \u201cactiveMQ.myService.*\u201d entries in goobi_config.properties for configuration. Service processor skeleton sample package org.goobi.mq.processores; import org.goobi.mq.*; import de.sub.goobi.config.ConfigCore; import de.sub.goobi.helper.enums.ReportLevel; public class MyServiceProcessor extends ActiveMQProcessor { public MyServiceProcessor() { super(ConfigMain.getParameter(\"activeMQ.myService.queue\", null)); } @Override protected void process(MapMessageObjectReader args) throws Exception { // TODO Auto-generated method stub } } Processor Response Responses from processors are designed to be handled as WebServiceResult objects. Those objects are MapMessages which send themselves to a topic configured in \u201cactiveMQ.results.topic\u201d. They consist of the Strings \u201cqueue\u201d (the name of the queue the job ticket was sent to), \u201cid\u201d (a String \u201cid\u201d in the MapMessage which is mandatory), \u201clevel\u201d and an optional \u201cmessage\u201d. When designing the MapMessage layout to parameterise your web service processor, please keep in mind that a String element \u201cid\u201d is mandatory. If process() terminates without error, it is meant to have done its job successfully and a WebServiceResult with level \u201csuccess\u201d will be sent. If process() returns an exception, a WebServiceResult with level \u201cfatal\u201d will be sent. The exception will be returned as the \u201cmessage\u201d String. You may also use the WebServiceResult class to send messages with the levels \u201cerror\u201d, \u201cwarn\u201d, \u201cinfo\u201d, \u201cdebug\u201d, \u201cverbose\u201d and \u201cludicrous\u201d which are meant to be informative only: new WebServiceResult(queueName, args.getMandatoryString(\"id\"), ReportLevel.INFO, \"Remote host is down, trying again later.\") .send(); Process Creation Service Kitodo.Production is equipped with a web service interface to automatically create new processes based on a given template. This allows the digitization process to be initiated from outside the application, for example by assigning a new digital ID to a record in a library catalogue (or\u2014at choice of the library\u2014by duplicating a record and assigning a new digital ID to the duplicate) and then running a script. The web service infrastructure is providet by an Active MQ server (see http://activemq.apache.org/ for details) which needs to be downloaded and started. Without further configuration, it provides everything necessary on port 61616 of the machine in question. The \u201cactiveMQ.hostURL\u201d must be set in goobi_config.properties to point to this server. The \u201cactiveMQ.createNewProcess.queue\u201d must be set to point to a queue of your choice where Kitodo.Production shall pick up orders to create new processes. Orders must be javax.jms.MapMessage objects with the following key-value-pairs provided: String template name of the process template to use String opac Cataloge to use for lookup String field Field to look into, usually 12 (PPN) String value Value to look for, id of physical medium String id Ticket ID (used in log responses) List<String> collections Collections to be selected Map<String, String> userFields (optional) May be used to populates AdditionalField entries Here is a sample java client to do the job. It expects to be passed from the command line the Active MQ host (e.g. tcp://localhost:61616), the queue name and the parameters as listed above. To run this application, the following JARs from the ActiveMQ server\u2019s /lib folder are required on the classpath: activemq-core geronimo-j2ee-management_1.1_spec genonimo-jms_1.1_spec log4j2 slf4j-api slf4j-log4j12 Main.java import java.util.*; import javax.jms.*; import org.apache.activemq.ActiveMQConnectionFactory; public class Main { public static int main(String[] args) { try { // Check arguments if (args.length < 8 || (args.length % 2) != 0) { System.out.println(\"Parameters: Active MQ host, queue name, \" + \"template name, opac name,\"); System.out.println(\" no. of search field, search \" + \"string, digital id, collection name,\"); System.out.println(\" [additional details field, \" + \"value, [add. details field, value, [...\"); return 1; } // Connect to server Connection connection = new ActiveMQConnectionFactory(args[0]) .createConnection(); connection.start(); Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); Destination destination = session.createQueue(args[1]); MessageProducer producer = session.createProducer(destination); producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT); // Create job ticket MapMessage message = session.createMapMessage(); message.setString(\"template\", args[2]); message.setString(\"opac\", args[3]); message.setString(\"field\", args[4]); message.setString(\"value\", args[5]); message.setString(\"id\", args[6]); List<String> collections = new ArrayList<String>(); collections.add(args[7]); message.setObject(\"collections\", collections); Map<String, String> userFields = new HashMap<String, String>(); for (int i = 8; i < args.length; i += 2) userFields.put(args[i], args[i + 1]); if (userFields.size() != 0) message.setObject(\"userFields\", userFields); // Send job ticket producer.send(message); // Shutdown session.close(); connection.close(); } catch (Exception e) { e.printStackTrace(); return 2; } return 0; } } Service to finalize steps Kitodo.Production is equipped with a web service interface to automatically finalize steps. This allows external software contributing to a workflow to report their success from outside the application. Additionally, properties can be populated and a message can be added to the processes\u2019 log (in former versions of Kitodo known as \u201cwiki field\u201d). The web service infrastructure is provided by an Active MQ server (see http://activemq.apache.org/ for details) which needs to be downloaded and started. Without further configuration, it provides everything necessary on port 61616 of the machine in question. The \u201cactiveMQ.hostURL\u201d must be set in goobi_config.properties to point to this server. The \u201cactiveMQ.finaliseStep.queue\u201d must be set to point to a queue of your choice where Kitodo.Production shall pick up orders to finalize steps. Orders must be javax.jms.MapMessage objects with the following key-value-pairs provided: String id ID of the step to close (do not mix up with the process ID) Map<String, String> properties (optional) May be used to populates properties String message Message to be added to the processes\u2019 log.","title":"Active MQ webservices"},{"location":"developer/api/activemq_jms_api/#active-mq-web-services-for-kitodo","text":"","title":"Active MQ web services for Kitodo"},{"location":"developer/api/activemq_jms_api/#jms","text":"Active Message Queue is an open source Java Messaging (JMS) implementation provided by the Apache Software Foundation. It is intended to be used to connect software components in a flexible way. The core is the Active MQ server which can be pictured like a post office. The mail boxes are named \u201cqueue\u201d or \u201ctopic\u201d. Queues work as expected: A producer sends a message where a consumer can pick it up. Topics can be pictured as black boards: The main difference is: A message read from a queue is removed from the queue. A message read from a topic is still available to others. Consumer clients can actively check the server or may register listeners with the server to be notified of new messages.","title":"JMS"},{"location":"developer/api/activemq_jms_api/#api-implementation","text":"This behaviour has already been implemented to Kitodo: The org.goobi.mq. ActiveMQDirector is a ServletContextListener which is registered in web.xml. On application startup, it registers all consumers from its \u201cservices\u201d variable to the server configured in \u201cactiveMQ.hostURL\u201d. The elements of this variable are classes extending the abstract class ActiveMQProcessor. This class implements the MessageListener and provides facilities to handle exceptions and to store the consumer which is required on shutdown to disconnect. To implement another web service processor, you have to implement a class which extends ActiveMQProcessor and implements its abstract void process(MapMessage). Here is the right place to do whatever your processor is intended to do. There is a class MapMessageObjectReader which shall be used to type safe retrieve complex objects from MapMessages. You must add your new class to the \u201cservices\u201d variable of ActiveMQDirector then. The Kitodo server administrator shall be in control which processors are being started, and which queue names they listen on. Implementation of this configurability is designed this way: The implementing class must pass its queue name to the constructor of the parent class. This is done by implementing the constructor like in the following skeleton. If the queue name is not configured, it will return null which will prevent the ActiveMQDirector from registering it to the server. Inside the class, the queue name is available in the global variable \u201cqueueName\u201d which is set by the parent class. The implementation may use arbitrary \u201cactiveMQ.myService.*\u201d entries in goobi_config.properties for configuration.","title":"API Implementation"},{"location":"developer/api/activemq_jms_api/#service-processor-skeleton-sample","text":"package org.goobi.mq.processores; import org.goobi.mq.*; import de.sub.goobi.config.ConfigCore; import de.sub.goobi.helper.enums.ReportLevel; public class MyServiceProcessor extends ActiveMQProcessor { public MyServiceProcessor() { super(ConfigMain.getParameter(\"activeMQ.myService.queue\", null)); } @Override protected void process(MapMessageObjectReader args) throws Exception { // TODO Auto-generated method stub } }","title":"Service processor skeleton sample"},{"location":"developer/api/activemq_jms_api/#processor-response","text":"Responses from processors are designed to be handled as WebServiceResult objects. Those objects are MapMessages which send themselves to a topic configured in \u201cactiveMQ.results.topic\u201d. They consist of the Strings \u201cqueue\u201d (the name of the queue the job ticket was sent to), \u201cid\u201d (a String \u201cid\u201d in the MapMessage which is mandatory), \u201clevel\u201d and an optional \u201cmessage\u201d. When designing the MapMessage layout to parameterise your web service processor, please keep in mind that a String element \u201cid\u201d is mandatory. If process() terminates without error, it is meant to have done its job successfully and a WebServiceResult with level \u201csuccess\u201d will be sent. If process() returns an exception, a WebServiceResult with level \u201cfatal\u201d will be sent. The exception will be returned as the \u201cmessage\u201d String. You may also use the WebServiceResult class to send messages with the levels \u201cerror\u201d, \u201cwarn\u201d, \u201cinfo\u201d, \u201cdebug\u201d, \u201cverbose\u201d and \u201cludicrous\u201d which are meant to be informative only: new WebServiceResult(queueName, args.getMandatoryString(\"id\"), ReportLevel.INFO, \"Remote host is down, trying again later.\") .send();","title":"Processor Response"},{"location":"developer/api/activemq_jms_api/#process-creation-service","text":"Kitodo.Production is equipped with a web service interface to automatically create new processes based on a given template. This allows the digitization process to be initiated from outside the application, for example by assigning a new digital ID to a record in a library catalogue (or\u2014at choice of the library\u2014by duplicating a record and assigning a new digital ID to the duplicate) and then running a script. The web service infrastructure is providet by an Active MQ server (see http://activemq.apache.org/ for details) which needs to be downloaded and started. Without further configuration, it provides everything necessary on port 61616 of the machine in question. The \u201cactiveMQ.hostURL\u201d must be set in goobi_config.properties to point to this server. The \u201cactiveMQ.createNewProcess.queue\u201d must be set to point to a queue of your choice where Kitodo.Production shall pick up orders to create new processes. Orders must be javax.jms.MapMessage objects with the following key-value-pairs provided: String template name of the process template to use String opac Cataloge to use for lookup String field Field to look into, usually 12 (PPN) String value Value to look for, id of physical medium String id Ticket ID (used in log responses) List<String> collections Collections to be selected Map<String, String> userFields (optional) May be used to populates AdditionalField entries Here is a sample java client to do the job. It expects to be passed from the command line the Active MQ host (e.g. tcp://localhost:61616), the queue name and the parameters as listed above. To run this application, the following JARs from the ActiveMQ server\u2019s /lib folder are required on the classpath: activemq-core geronimo-j2ee-management_1.1_spec genonimo-jms_1.1_spec log4j2 slf4j-api slf4j-log4j12","title":"Process Creation Service"},{"location":"developer/api/activemq_jms_api/#mainjava","text":"import java.util.*; import javax.jms.*; import org.apache.activemq.ActiveMQConnectionFactory; public class Main { public static int main(String[] args) { try { // Check arguments if (args.length < 8 || (args.length % 2) != 0) { System.out.println(\"Parameters: Active MQ host, queue name, \" + \"template name, opac name,\"); System.out.println(\" no. of search field, search \" + \"string, digital id, collection name,\"); System.out.println(\" [additional details field, \" + \"value, [add. details field, value, [...\"); return 1; } // Connect to server Connection connection = new ActiveMQConnectionFactory(args[0]) .createConnection(); connection.start(); Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); Destination destination = session.createQueue(args[1]); MessageProducer producer = session.createProducer(destination); producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT); // Create job ticket MapMessage message = session.createMapMessage(); message.setString(\"template\", args[2]); message.setString(\"opac\", args[3]); message.setString(\"field\", args[4]); message.setString(\"value\", args[5]); message.setString(\"id\", args[6]); List<String> collections = new ArrayList<String>(); collections.add(args[7]); message.setObject(\"collections\", collections); Map<String, String> userFields = new HashMap<String, String>(); for (int i = 8; i < args.length; i += 2) userFields.put(args[i], args[i + 1]); if (userFields.size() != 0) message.setObject(\"userFields\", userFields); // Send job ticket producer.send(message); // Shutdown session.close(); connection.close(); } catch (Exception e) { e.printStackTrace(); return 2; } return 0; } }","title":"Main.java"},{"location":"developer/api/activemq_jms_api/#service-to-finalize-steps","text":"Kitodo.Production is equipped with a web service interface to automatically finalize steps. This allows external software contributing to a workflow to report their success from outside the application. Additionally, properties can be populated and a message can be added to the processes\u2019 log (in former versions of Kitodo known as \u201cwiki field\u201d). The web service infrastructure is provided by an Active MQ server (see http://activemq.apache.org/ for details) which needs to be downloaded and started. Without further configuration, it provides everything necessary on port 61616 of the machine in question. The \u201cactiveMQ.hostURL\u201d must be set in goobi_config.properties to point to this server. The \u201cactiveMQ.finaliseStep.queue\u201d must be set to point to a queue of your choice where Kitodo.Production shall pick up orders to finalize steps. Orders must be javax.jms.MapMessage objects with the following key-value-pairs provided: String id ID of the step to close (do not mix up with the process ID) Map<String, String> properties (optional) May be used to populates properties String message Message to be added to the processes\u2019 log.","title":"Service to finalize steps"},{"location":"developer/api/jersey_jaxrs_api/","text":"Jersey WebAPI The Jersey based Webapi has been introduced to quickly query process status and configuration via Web interface. It currently exposes three resources: Processes, Projects and CatalogConfiguration under the URL root /rest. Implementation and Configuration The web resources belong to the org.goobi.webapi package and use standard Java JAX-RS API annotations to denote resource routing. Coming from different people, data access is implemented in different ways. The Processes resources uses a DAO to query Hibernate and deliver POJO Bean instances, whereas Projects and CatalogConfiguration resources directly access to internal Kitodo API. Jersey Servlet Configuration The Jersey Container servlet is responsible for translating requests to Java calls and for serializing the returned Java objects. It is configured in the applications web.xml file by default: <servlet> <servlet-name>Kitodo REST Service based on Jersey</servlet-name> <servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class> <init-param> <param-name>com.sun.jersey.config.property.packages</param-name> <param-value>org.goobi.webapi.resources; org.goobi.webapi.provider</param-value> </init-param> <!-- explanation of load-on-startup: http://stackoverflow.com/a/1298984 --> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>Kitodo REST Service based on Jersey</servlet-name> <url-pattern>/rest/*</url-pattern> </servlet-mapping> If you do not want to provide that service remove the corresponding Servlet definition and mapping. Processes and Steps /processes To get JSON/XML formatted list of all current processes in the system a GET request to /rest/processes: $ curl http://localhost:8080/kitodo/rest/processes { \"goobiProcess\": [ { \"identifier\":\"1118749846\", \"title\":\"Abbildungen von Dresdens alten und neuen Pracht-Geb\u00e4uden, Volks- und Hof-Festen\" }, { \"identifier\":\"118765094\", \"title\":\"Dresden mit seinen Prachtgeb\u00e4uden und sch\u00f6nsten Umgebungen\" } ] } $ curl -H 'Accept: application/xml' http://localhost:8080/kitodo/rest/processes <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <goobiProcesses> <goobiProcess> <identifier>118749846</identifier> <title>Abbildungen von Dresdens alten und neuen Pracht-Geb\u00e4uden, Volks- und Hof-Festen</title> </goobiProcess> <goobiProcess> <identifier>118765094</identifier> <title>Dresden mit seinen Prachtgeb\u00e4uden und sch\u00f6nsten Umgebungen</title> </goobiProcess> </goobiProcesses> Note that the amount of data returned can be very big depending on the number of processes in your system. The output appears to be more performant. /processes/\\<Identifier> Get XML formatted information about a single process: <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <goobiProcess> <identifier>319329496</identifier> <title>An das K\u00f6nigliche Ministerium des Innern, Abteilung f\u00fcr Ackerbau, Gewerbe und Handel zu Dresden</title> </goobiProcess> /process/\\<Identifier>/steps Get XML formatted information about the steps of a specific process and their current state. <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <goobiProcessSteps> <goobiProcessStep> <sequence>1</sequence> <state>3</state> <title>Anlegen eines Vorganges</title> </goobiProcessStep> <goobiProcessStep> <sequence>2</sequence> <state>3</state> <title>Scannen</title> </goobiProcessStep> <goobiProcessStep> <sequence>3</sequence> <state>3</state> <title>Erfassen der Meta- und Strukturdaten</title> </goobiProcessStep> <goobiProcessStep> <sequence>4</sequence> <state>3</state> <title>Export / Import in das DMS</title> </goobiProcessStep> </goobiProcessSteps> CatalogConfiguration // TODO Add resource documentation for /rest/CatalogConfiguration. Projects // TODO Add resource documentation for /rest/projects.","title":"Jersey WebAPI"},{"location":"developer/api/jersey_jaxrs_api/#jersey-webapi","text":"The Jersey based Webapi has been introduced to quickly query process status and configuration via Web interface. It currently exposes three resources: Processes, Projects and CatalogConfiguration under the URL root /rest.","title":"Jersey WebAPI"},{"location":"developer/api/jersey_jaxrs_api/#implementation-and-configuration","text":"The web resources belong to the org.goobi.webapi package and use standard Java JAX-RS API annotations to denote resource routing. Coming from different people, data access is implemented in different ways. The Processes resources uses a DAO to query Hibernate and deliver POJO Bean instances, whereas Projects and CatalogConfiguration resources directly access to internal Kitodo API.","title":"Implementation and Configuration"},{"location":"developer/api/jersey_jaxrs_api/#jersey-servlet-configuration","text":"The Jersey Container servlet is responsible for translating requests to Java calls and for serializing the returned Java objects. It is configured in the applications web.xml file by default: <servlet> <servlet-name>Kitodo REST Service based on Jersey</servlet-name> <servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class> <init-param> <param-name>com.sun.jersey.config.property.packages</param-name> <param-value>org.goobi.webapi.resources; org.goobi.webapi.provider</param-value> </init-param> <!-- explanation of load-on-startup: http://stackoverflow.com/a/1298984 --> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>Kitodo REST Service based on Jersey</servlet-name> <url-pattern>/rest/*</url-pattern> </servlet-mapping> If you do not want to provide that service remove the corresponding Servlet definition and mapping.","title":"Jersey Servlet Configuration"},{"location":"developer/api/jersey_jaxrs_api/#processes-and-steps","text":"","title":"Processes and Steps"},{"location":"developer/api/jersey_jaxrs_api/#processes","text":"To get JSON/XML formatted list of all current processes in the system a GET request to /rest/processes: $ curl http://localhost:8080/kitodo/rest/processes { \"goobiProcess\": [ { \"identifier\":\"1118749846\", \"title\":\"Abbildungen von Dresdens alten und neuen Pracht-Geb\u00e4uden, Volks- und Hof-Festen\" }, { \"identifier\":\"118765094\", \"title\":\"Dresden mit seinen Prachtgeb\u00e4uden und sch\u00f6nsten Umgebungen\" } ] } $ curl -H 'Accept: application/xml' http://localhost:8080/kitodo/rest/processes <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <goobiProcesses> <goobiProcess> <identifier>118749846</identifier> <title>Abbildungen von Dresdens alten und neuen Pracht-Geb\u00e4uden, Volks- und Hof-Festen</title> </goobiProcess> <goobiProcess> <identifier>118765094</identifier> <title>Dresden mit seinen Prachtgeb\u00e4uden und sch\u00f6nsten Umgebungen</title> </goobiProcess> </goobiProcesses> Note that the amount of data returned can be very big depending on the number of processes in your system. The output appears to be more performant.","title":"/processes"},{"location":"developer/api/jersey_jaxrs_api/#processesidentifier","text":"Get XML formatted information about a single process: <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <goobiProcess> <identifier>319329496</identifier> <title>An das K\u00f6nigliche Ministerium des Innern, Abteilung f\u00fcr Ackerbau, Gewerbe und Handel zu Dresden</title> </goobiProcess>","title":"/processes/\\&lt;Identifier>"},{"location":"developer/api/jersey_jaxrs_api/#processidentifiersteps","text":"Get XML formatted information about the steps of a specific process and their current state. <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <goobiProcessSteps> <goobiProcessStep> <sequence>1</sequence> <state>3</state> <title>Anlegen eines Vorganges</title> </goobiProcessStep> <goobiProcessStep> <sequence>2</sequence> <state>3</state> <title>Scannen</title> </goobiProcessStep> <goobiProcessStep> <sequence>3</sequence> <state>3</state> <title>Erfassen der Meta- und Strukturdaten</title> </goobiProcessStep> <goobiProcessStep> <sequence>4</sequence> <state>3</state> <title>Export / Import in das DMS</title> </goobiProcessStep> </goobiProcessSteps>","title":"/process/\\&lt;Identifier>/steps"},{"location":"developer/api/jersey_jaxrs_api/#catalogconfiguration","text":"// TODO Add resource documentation for /rest/CatalogConfiguration.","title":"CatalogConfiguration"},{"location":"developer/api/jersey_jaxrs_api/#projects","text":"// TODO Add resource documentation for /rest/projects.","title":"Projects"},{"location":"developer/architecture/","text":"System architecture This documentation is work in progress. Please consult the javadoc or contact the developer team . Below you will find some fragments regarding the system architecture of Kitodo.production. Data types Entity This data type is used for communication with database. There are defined two abstract classes: BaseBean and BaseIndexedBean BaseBean is extended by entities which are stored only in database and by abstract BaseIndexedBean. All beans classes which are stored both in database and index extend BaseIndexedBean class. Type This data type is used for communication with ElasticSearch index. All type classes extend BaseType class. Type classes produce JSON objects which are converted to HTTP entities and in that form send to the ES server. Data Transfer Object This data type is used for communication with frontend. All DTO classes extend BaseDTO class. Only indexed objects have DTO classes (indexed - beans which extend BaseIndexedBean). Data used for them is extracted from JSON objects returned as search results from ES index. All attributes are set up in data service classes (e.g. ProcessService). UML Diagram Modification of data Scenario: New column to database was inserted. Add new attribute to Entity class (XxxxBean) with get/set methods. Write flyway migration. Add new JSON key in createDocument method of XxxxType class. Adjust test for this method. Update mapping for ElasticSearch index. Add new attribute to DTO class (XxxxDTO) with get/set methods. Add usage of the setter in method convertJSONObjectToDTO of XxxxService class. 8 Update frontend page with usage of the new attribute. Run application and recreate index (drop mapping, create new mapping, reindex data). FileManagement FileManagementInterface is used for file management. It contains two methods: retrieve it takes a file path and returns the file to which this path has pointed. save it takes a file and saves it to the given path and it returns a boolean if saving was successful or not.","title":"System architecture"},{"location":"developer/architecture/#system-architecture","text":"This documentation is work in progress. Please consult the javadoc or contact the developer team . Below you will find some fragments regarding the system architecture of Kitodo.production.","title":"System architecture"},{"location":"developer/architecture/#data-types","text":"","title":"Data types"},{"location":"developer/architecture/#entity","text":"This data type is used for communication with database. There are defined two abstract classes: BaseBean and BaseIndexedBean BaseBean is extended by entities which are stored only in database and by abstract BaseIndexedBean. All beans classes which are stored both in database and index extend BaseIndexedBean class.","title":"Entity"},{"location":"developer/architecture/#type","text":"This data type is used for communication with ElasticSearch index. All type classes extend BaseType class. Type classes produce JSON objects which are converted to HTTP entities and in that form send to the ES server.","title":"Type"},{"location":"developer/architecture/#data-transfer-object","text":"This data type is used for communication with frontend. All DTO classes extend BaseDTO class. Only indexed objects have DTO classes (indexed - beans which extend BaseIndexedBean). Data used for them is extracted from JSON objects returned as search results from ES index. All attributes are set up in data service classes (e.g. ProcessService).","title":"Data Transfer Object"},{"location":"developer/architecture/#uml-diagram","text":"","title":"UML Diagram"},{"location":"developer/architecture/#modification-of-data","text":"Scenario: New column to database was inserted. Add new attribute to Entity class (XxxxBean) with get/set methods. Write flyway migration. Add new JSON key in createDocument method of XxxxType class. Adjust test for this method. Update mapping for ElasticSearch index. Add new attribute to DTO class (XxxxDTO) with get/set methods. Add usage of the setter in method convertJSONObjectToDTO of XxxxService class. 8 Update frontend page with usage of the new attribute. Run application and recreate index (drop mapping, create new mapping, reindex data).","title":"Modification of data"},{"location":"developer/architecture/#filemanagement","text":"FileManagementInterface is used for file management. It contains two methods: retrieve it takes a file path and returns the file to which this path has pointed. save it takes a file and saves it to the given path and it returns a boolean if saving was successful or not.","title":"FileManagement"},{"location":"developer/architecture/workflow/","text":"Workflow Modeler Diagram template processing Create process out of template Example diagram XML file which represents above displayed image: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:template=\"http://www.kitodo.com/template\" id=\"sample-diagram\" targetNamespace=\"http://bpmn.io/schema/bpmn\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"> <bpmn2:process id=\"Process_1\" isExecutable=\"false\" template:outputName=\"Template\" > <bpmn2:startEvent id=\"StartEvent_1\"> <bpmn2:outgoing>SequenceFlow_0651lvf</bpmn2:outgoing> </bpmn2:startEvent> <bpmn2:task id=\"Task_0q73jg6\" name=\"First task\"> <bpmn2:incoming>SequenceFlow_0651lvf</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_1uym1c8</bpmn2:outgoing> </bpmn2:task> <bpmn2:sequenceFlow id=\"SequenceFlow_0651lvf\" sourceRef=\"StartEvent_1\" targetRef=\"Task_0q73jg6\" /> <bpmn2:task id=\"Task_02rdayp\" name=\"Some normal task\"> <bpmn2:incoming>SequenceFlow_0k77eji</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_08oilfh</bpmn2:outgoing> </bpmn2:task> <bpmn2:task id=\"Task_1m88bz0\" name=\"Some other normal\"> <bpmn2:incoming>SequenceFlow_08oilfh</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_10opxw7</bpmn2:outgoing> </bpmn2:task> <bpmn2:task id=\"Task_0dzgqnz\" name=\"Ending task\"> <bpmn2:incoming>SequenceFlow_10opxw7</bpmn2:incoming> <bpmn2:incoming>SequenceFlow_171r48b</bpmn2:incoming> <bpmn2:incoming>SequenceFlow_035iml6</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_1ntrtjs</bpmn2:outgoing> </bpmn2:task> <bpmn2:endEvent id=\"EndEvent_1jlzp4p\"> <bpmn2:incoming>SequenceFlow_1ntrtjs</bpmn2:incoming> </bpmn2:endEvent> <bpmn2:exclusiveGateway id=\"ExclusiveGateway_0dclvs2\"> <bpmn2:incoming>SequenceFlow_1uym1c8</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_0w0rghc</bpmn2:outgoing> <bpmn2:outgoing>SequenceFlow_0k77eji</bpmn2:outgoing> <bpmn2:outgoing>SequenceFlow_035iml6</bpmn2:outgoing> </bpmn2:exclusiveGateway> <bpmn2:sequenceFlow id=\"SequenceFlow_0w0rghc\" sourceRef=\"ExclusiveGateway_0dclvs2\" targetRef=\"Task_0w8342u\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_0k77eji\" sourceRef=\"ExclusiveGateway_0dclvs2\" targetRef=\"Task_02rdayp\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_1uym1c8\" sourceRef=\"Task_0q73jg6\" targetRef=\"ExclusiveGateway_0dclvs2\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_08oilfh\" sourceRef=\"Task_02rdayp\" targetRef=\"Task_1m88bz0\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_10opxw7\" sourceRef=\"Task_1m88bz0\" targetRef=\"Task_0dzgqnz\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_171r48b\" sourceRef=\"Task_0w8342u\" targetRef=\"Task_0dzgqnz\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_1ntrtjs\" sourceRef=\"Task_0dzgqnz\" targetRef=\"EndEvent_1jlzp4p\" /> <bpmn2:scriptTask id=\"Task_0w8342u\" name=\"Script task\" template:scriptName=\"Script\"> <bpmn2:incoming>SequenceFlow_0w0rghc</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_171r48b</bpmn2:outgoing> </bpmn2:scriptTask> <bpmn2:sequenceFlow id=\"SequenceFlow_035iml6\" sourceRef=\"ExclusiveGateway_0dclvs2\" targetRef=\"Task_0dzgqnz\" /> </bpmn2:process> <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\"> non relevant shape information </bpmndi:BPMNDiagram> </bpmn2:definitions>","title":"Overview"},{"location":"developer/architecture/workflow/#workflow","text":"Modeler Diagram template processing Create process out of template","title":"Workflow"},{"location":"developer/architecture/workflow/#example-diagram","text":"XML file which represents above displayed image: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:template=\"http://www.kitodo.com/template\" id=\"sample-diagram\" targetNamespace=\"http://bpmn.io/schema/bpmn\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"> <bpmn2:process id=\"Process_1\" isExecutable=\"false\" template:outputName=\"Template\" > <bpmn2:startEvent id=\"StartEvent_1\"> <bpmn2:outgoing>SequenceFlow_0651lvf</bpmn2:outgoing> </bpmn2:startEvent> <bpmn2:task id=\"Task_0q73jg6\" name=\"First task\"> <bpmn2:incoming>SequenceFlow_0651lvf</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_1uym1c8</bpmn2:outgoing> </bpmn2:task> <bpmn2:sequenceFlow id=\"SequenceFlow_0651lvf\" sourceRef=\"StartEvent_1\" targetRef=\"Task_0q73jg6\" /> <bpmn2:task id=\"Task_02rdayp\" name=\"Some normal task\"> <bpmn2:incoming>SequenceFlow_0k77eji</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_08oilfh</bpmn2:outgoing> </bpmn2:task> <bpmn2:task id=\"Task_1m88bz0\" name=\"Some other normal\"> <bpmn2:incoming>SequenceFlow_08oilfh</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_10opxw7</bpmn2:outgoing> </bpmn2:task> <bpmn2:task id=\"Task_0dzgqnz\" name=\"Ending task\"> <bpmn2:incoming>SequenceFlow_10opxw7</bpmn2:incoming> <bpmn2:incoming>SequenceFlow_171r48b</bpmn2:incoming> <bpmn2:incoming>SequenceFlow_035iml6</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_1ntrtjs</bpmn2:outgoing> </bpmn2:task> <bpmn2:endEvent id=\"EndEvent_1jlzp4p\"> <bpmn2:incoming>SequenceFlow_1ntrtjs</bpmn2:incoming> </bpmn2:endEvent> <bpmn2:exclusiveGateway id=\"ExclusiveGateway_0dclvs2\"> <bpmn2:incoming>SequenceFlow_1uym1c8</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_0w0rghc</bpmn2:outgoing> <bpmn2:outgoing>SequenceFlow_0k77eji</bpmn2:outgoing> <bpmn2:outgoing>SequenceFlow_035iml6</bpmn2:outgoing> </bpmn2:exclusiveGateway> <bpmn2:sequenceFlow id=\"SequenceFlow_0w0rghc\" sourceRef=\"ExclusiveGateway_0dclvs2\" targetRef=\"Task_0w8342u\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_0k77eji\" sourceRef=\"ExclusiveGateway_0dclvs2\" targetRef=\"Task_02rdayp\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_1uym1c8\" sourceRef=\"Task_0q73jg6\" targetRef=\"ExclusiveGateway_0dclvs2\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_08oilfh\" sourceRef=\"Task_02rdayp\" targetRef=\"Task_1m88bz0\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_10opxw7\" sourceRef=\"Task_1m88bz0\" targetRef=\"Task_0dzgqnz\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_171r48b\" sourceRef=\"Task_0w8342u\" targetRef=\"Task_0dzgqnz\" /> <bpmn2:sequenceFlow id=\"SequenceFlow_1ntrtjs\" sourceRef=\"Task_0dzgqnz\" targetRef=\"EndEvent_1jlzp4p\" /> <bpmn2:scriptTask id=\"Task_0w8342u\" name=\"Script task\" template:scriptName=\"Script\"> <bpmn2:incoming>SequenceFlow_0w0rghc</bpmn2:incoming> <bpmn2:outgoing>SequenceFlow_171r48b</bpmn2:outgoing> </bpmn2:scriptTask> <bpmn2:sequenceFlow id=\"SequenceFlow_035iml6\" sourceRef=\"ExclusiveGateway_0dclvs2\" targetRef=\"Task_0dzgqnz\" /> </bpmn2:process> <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\"> non relevant shape information </bpmndi:BPMNDiagram> </bpmn2:definitions>","title":"Example diagram"},{"location":"developer/architecture/workflow/Diagram_template_processing/","text":"Diagram - template processing Camunda BPMN Model library Kitodo uses for reading BPMN diagrams as processes Camunda BPMN library. public void loadProcess() throws IOException { String diagramPath = ConfigCore.getKitodoDiagramDirectory() + this.diagramName + \".bpmn20.xml\"; modelInstance = Bpmn.readModelFromStream(fileService.read(new File(diagramPath).toURI())); } It has bean classes which reads custom XML attributes. They take as attribute BPMN classes (Process, Task, ScriptTask) and read those attributes: static final String NAMESPACE = \"http://www.kitodo.com/template\"; .... task.getAttributeValueNs(NAMESPACE, \"priority\") Database Template table was modified to store reference to Workflow table. Additionally Task table has a column workflowCondition, which stores information about possible conditions defined in gateways.","title":"Diagram template processing"},{"location":"developer/architecture/workflow/Diagram_template_processing/#diagram-template-processing","text":"","title":"Diagram - template processing"},{"location":"developer/architecture/workflow/Diagram_template_processing/#camunda-bpmn-model-library","text":"Kitodo uses for reading BPMN diagrams as processes Camunda BPMN library. public void loadProcess() throws IOException { String diagramPath = ConfigCore.getKitodoDiagramDirectory() + this.diagramName + \".bpmn20.xml\"; modelInstance = Bpmn.readModelFromStream(fileService.read(new File(diagramPath).toURI())); } It has bean classes which reads custom XML attributes. They take as attribute BPMN classes (Process, Task, ScriptTask) and read those attributes: static final String NAMESPACE = \"http://www.kitodo.com/template\"; .... task.getAttributeValueNs(NAMESPACE, \"priority\")","title":"Camunda BPMN Model library"},{"location":"developer/architecture/workflow/Diagram_template_processing/#database","text":"Template table was modified to store reference to Workflow table. Additionally Task table has a column workflowCondition, which stores information about possible conditions defined in gateways.","title":"Database"},{"location":"developer/architecture/workflow/Modeler/","text":"Modeler Kitodo uses standard BPMN model with custom extension, which provides user possibility to add Kitodo specific properties. Extension BPMN Process It is extended by TemplateProcess which contains three custom properties: outputName docket - value of docket's id ruleset - value of ruleset's id BPMN Task It is extended by TemplateTask which contains custom properties: priority - integer editType - true / false typeMetadata - true / false typeAutomatic - true / false typeImportFileUpload - true / false typeExportRussian - true / false typeImagesRead - true / false typeImagesWrite - true / false typeExportDms - true / false typeAcceptClose - true / false typeCloseVerify - true / false batchStep - true / false They are directly mapped from task columns in Task table. BPMN ScriptTask It is extended by TemplateScriptTask which contains two additional custom properties: scriptName - string scriptPath - string They are directly mapped from task columns in Task table. Storage Diagrams are stored in user local directory, which is defined in kitodo_config.properties: directory.diagrams = path/to/diagram/directory Additionally there was added Workflow table which has two columns - title and file. Title is id of Process defined in this diagram and file is a file name of this diagram.","title":"Modeler"},{"location":"developer/architecture/workflow/Modeler/#modeler","text":"Kitodo uses standard BPMN model with custom extension, which provides user possibility to add Kitodo specific properties.","title":"Modeler"},{"location":"developer/architecture/workflow/Modeler/#extension","text":"","title":"Extension"},{"location":"developer/architecture/workflow/Modeler/#bpmn-process","text":"It is extended by TemplateProcess which contains three custom properties: outputName docket - value of docket's id ruleset - value of ruleset's id","title":"BPMN Process"},{"location":"developer/architecture/workflow/Modeler/#bpmn-task","text":"It is extended by TemplateTask which contains custom properties: priority - integer editType - true / false typeMetadata - true / false typeAutomatic - true / false typeImportFileUpload - true / false typeExportRussian - true / false typeImagesRead - true / false typeImagesWrite - true / false typeExportDms - true / false typeAcceptClose - true / false typeCloseVerify - true / false batchStep - true / false They are directly mapped from task columns in Task table.","title":"BPMN Task"},{"location":"developer/architecture/workflow/Modeler/#bpmn-scripttask","text":"It is extended by TemplateScriptTask which contains two additional custom properties: scriptName - string scriptPath - string They are directly mapped from task columns in Task table.","title":"BPMN ScriptTask"},{"location":"developer/architecture/workflow/Modeler/#storage","text":"Diagrams are stored in user local directory, which is defined in kitodo_config.properties: directory.diagrams = path/to/diagram/directory Additionally there was added Workflow table which has two columns - title and file. Title is id of Process defined in this diagram and file is a file name of this diagram.","title":"Storage"},{"location":"developer/architecture/workflow/Template_process_creation/","text":"Create process out of template Copy process attributes It works exactly like in previous version. Copy tasks Here logic has changed. New templates allow to create processes with conditional task execution. That means that during process creation user can give conditions (they are defined in diagram gateways and stored in workflowCondition column of Task table). According to those conditions certain tasks are copied to newly created process. public static void copyTasks(Template processTemplate, Process processCopy, List<String> workflowConditions) { List<Task> tasks = new ArrayList<>(); for (Task templateTask : processTemplate.getTasks()) { String taskWorkflowCondition = templateTask.getWorkflowCondition(); if (Objects.isNull(workflowConditions) || workflowConditions.isEmpty()) { // tasks created before workflow functionality was introduced has null value if (Objects.isNull(taskWorkflowCondition) || taskWorkflowCondition.contains(\"default\")) { Task task = getCopiedTask(templateTask); task.setProcess(processCopy); tasks.add(task); } } else { for (String workflowCondition : workflowConditions) { if (taskWorkflowCondition.contains(\"default\")) { Task task = getCopiedTask(templateTask); task.setProcess(processCopy); tasks.add(task); } else if (taskWorkflowCondition.contains(workflowCondition)) { Task task = getCopiedTask(templateTask); task.setProcess(processCopy); tasks.add(task); } } } } adjustTaskOrdering(tasks); processCopy.setTasks(tasks); } At the end right task ordering is determined.","title":"Create process out of template"},{"location":"developer/architecture/workflow/Template_process_creation/#create-process-out-of-template","text":"","title":"Create process out of template"},{"location":"developer/architecture/workflow/Template_process_creation/#copy-process-attributes","text":"It works exactly like in previous version.","title":"Copy process attributes"},{"location":"developer/architecture/workflow/Template_process_creation/#copy-tasks","text":"Here logic has changed. New templates allow to create processes with conditional task execution. That means that during process creation user can give conditions (they are defined in diagram gateways and stored in workflowCondition column of Task table). According to those conditions certain tasks are copied to newly created process. public static void copyTasks(Template processTemplate, Process processCopy, List<String> workflowConditions) { List<Task> tasks = new ArrayList<>(); for (Task templateTask : processTemplate.getTasks()) { String taskWorkflowCondition = templateTask.getWorkflowCondition(); if (Objects.isNull(workflowConditions) || workflowConditions.isEmpty()) { // tasks created before workflow functionality was introduced has null value if (Objects.isNull(taskWorkflowCondition) || taskWorkflowCondition.contains(\"default\")) { Task task = getCopiedTask(templateTask); task.setProcess(processCopy); tasks.add(task); } } else { for (String workflowCondition : workflowConditions) { if (taskWorkflowCondition.contains(\"default\")) { Task task = getCopiedTask(templateTask); task.setProcess(processCopy); tasks.add(task); } else if (taskWorkflowCondition.contains(workflowCondition)) { Task task = getCopiedTask(templateTask); task.setProcess(processCopy); tasks.add(task); } } } } adjustTaskOrdering(tasks); processCopy.setTasks(tasks); } At the end right task ordering is determined.","title":"Copy tasks"},{"location":"developer/gettingstarted/","text":"Building The software is written in Java and using Java Server Faces web technology to run on a Tomcat Servlet container backed up by a MySQL database accessed utilizing the Hibernate framework . It uses (Unix/Windows) shell scripts and is often used with Windows shares in Samba environments authenticated via LDAP. The project structure is IDE independent. The tool for issue building, testing and packaging of the application is Maven . Dependencies Available dependencies are fetched from Maven Central. Further dependencies (not available in Maven Central) are located in Kitodo/src/main/webapp/WEB-INF/lib. Two things that are not shipped are a Tomcat specific servlet API and an ElasticSearch server. First thing should come along with the Tomcat distribution you are building against. Second, you need to download by yourself from ElasticSearch 5.4.3 and start before Maven build. On the Windows system ElasticSearch starts after open elasticsearch.bat file from bin folder. Additional information about running of ElasticSearch can be found here . Building manuals Build integrated demo Build development version Eclipse on Windows Create VirtualBox Appliance Configuring your distribution Basic configuration files are located under src/main/resources/ directory. To provide a custom (local) configuration, create a directory config-local and put there your specific configuration files just before you create a distribution via the mvn command. The build script will then replace every default configuration file with the configuration file it finds in your config-local directory. Most probably, you will have to adjust these four files: * kitodo_config.properties * contentServerConfig.xml * hibernate.cfg.xml * log4j2.properties Setting up a Kitodo instance can be quite tricky. For more help on how to configure Kitodo, please check the installation guides , the GitHub Wiki or ask questions on the mailing lists .","title":"Building"},{"location":"developer/gettingstarted/#building","text":"The software is written in Java and using Java Server Faces web technology to run on a Tomcat Servlet container backed up by a MySQL database accessed utilizing the Hibernate framework . It uses (Unix/Windows) shell scripts and is often used with Windows shares in Samba environments authenticated via LDAP. The project structure is IDE independent. The tool for issue building, testing and packaging of the application is Maven .","title":"Building"},{"location":"developer/gettingstarted/#dependencies","text":"Available dependencies are fetched from Maven Central. Further dependencies (not available in Maven Central) are located in Kitodo/src/main/webapp/WEB-INF/lib. Two things that are not shipped are a Tomcat specific servlet API and an ElasticSearch server. First thing should come along with the Tomcat distribution you are building against. Second, you need to download by yourself from ElasticSearch 5.4.3 and start before Maven build. On the Windows system ElasticSearch starts after open elasticsearch.bat file from bin folder. Additional information about running of ElasticSearch can be found here .","title":"Dependencies"},{"location":"developer/gettingstarted/#building-manuals","text":"Build integrated demo Build development version Eclipse on Windows Create VirtualBox Appliance","title":"Building manuals"},{"location":"developer/gettingstarted/#configuring-your-distribution","text":"Basic configuration files are located under src/main/resources/ directory. To provide a custom (local) configuration, create a directory config-local and put there your specific configuration files just before you create a distribution via the mvn command. The build script will then replace every default configuration file with the configuration file it finds in your config-local directory. Most probably, you will have to adjust these four files: * kitodo_config.properties * contentServerConfig.xml * hibernate.cfg.xml * log4j2.properties Setting up a Kitodo instance can be quite tricky. For more help on how to configure Kitodo, please check the installation guides , the GitHub Wiki or ask questions on the mailing lists .","title":"Configuring your distribution"},{"location":"developer/gettingstarted/demo/","text":"How to run Kitodo.Production in demo mode Prerequisites: Make sure you have Java SE Development Kit in at least version 11 installed Make sure you have Git installed Make sure you have Maven installed Get the source code If you have not done yet, fork the project repository on GitHub. Use Git (using a tool like TortoiseGit , or the command line) to clone the repository as a subdirectory. Start the application On the command line, change to the directory you just cloned and execute the following command: mvn clean install '-Pdemo,!development' (Without ' ' on windows cmd) This will set up the environment (elastic search, H2 database, Apache Tomcat webserver) and provides some example data. To stop the application just hit Ctrl + c at the command line window. Be aware that every data which has been inserted is lost when the application is stopped. Do not use in a production system!","title":"Build integrated demo"},{"location":"developer/gettingstarted/demo/#how-to-run-kitodoproduction-in-demo-mode","text":"","title":"How to run Kitodo.Production in demo mode"},{"location":"developer/gettingstarted/demo/#prerequisites","text":"Make sure you have Java SE Development Kit in at least version 11 installed Make sure you have Git installed Make sure you have Maven installed","title":"Prerequisites:"},{"location":"developer/gettingstarted/demo/#get-the-source-code","text":"If you have not done yet, fork the project repository on GitHub. Use Git (using a tool like TortoiseGit , or the command line) to clone the repository as a subdirectory.","title":"Get the source code"},{"location":"developer/gettingstarted/demo/#start-the-application","text":"On the command line, change to the directory you just cloned and execute the following command: mvn clean install '-Pdemo,!development' (Without ' ' on windows cmd) This will set up the environment (elastic search, H2 database, Apache Tomcat webserver) and provides some example data. To stop the application just hit Ctrl + c at the command line window. Be aware that every data which has been inserted is lost when the application is stopped. Do not use in a production system!","title":"Start the application"},{"location":"developer/gettingstarted/development-version/","text":"Build development version of Kitodo 3.x 1. System environment Download and install Debian 9.4 . Install sudo and reboot su -c \"apt install -y sudo && adduser $USER sudo && echo \\\"Defaults timestamp_timeout=300\\\" >> /etc/sudoers.d/timeout && reboot\" 2. Build files for deployment Add mysql.com 5.7 repository sudo apt install -y dirmngr sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 5072E1F5 && echo \"deb http://repo.mysql.com/apt/debian/ stretch mysql-5.7\" | sudo tee -a /etc/apt/sources.list.d/mysql-5.7.list Install openjdk-11 echo 'deb http://ftp.debian.org/debian stretch-backports main' | sudo tee /etc/apt/sources.list.d/stretch-backports.list sudo apt update && sudo apt install -y openjdk-11-jdk Install packages maven, mysql-community-server and zip sudo debconf-set-selections <<< \"mysql-community-server mysql-community-server/root-pass password \" sudo debconf-set-selections <<< \"mysql-community-server mysql-community-server/re-root-pass password \" sudo apt update && sudo apt install -y maven mysql-community-server zip Change java security config (for cloud environments) sudo sed -i 's/securerandom.source=file:\\/dev\\/random/securerandom.source=file:\\/dev\\/urandom/' /etc/java-11-openjdk/security/java.security Build development version and modules wget https://github.com/kitodo/kitodo-production/archive/master.zip unzip master.zip && rm master.zip (cd kitodo-production-master/ && mvn clean package '-P!development') zip -j kitodo-3-modules.zip kitodo-production-master/Kitodo/modules/*.jar mv kitodo-production-master/Kitodo/target/kitodo-3*.war kitodo-3.war Note: If you want to build a release version, you may want to set the version in pom.xml files before packaging Create MySQL database and user sudo mysql -e \"create database kitodo;grant all privileges on kitodo.* to kitodo@localhost identified by 'kitodo';flush privileges;\" Generate SQL dump (flyway migration) cat kitodo-production-master/Kitodo/setup/schema.sql | mysql -u kitodo -D kitodo --password=kitodo cat kitodo-production-master/Kitodo/setup/default.sql | mysql -u kitodo -D kitodo --password=kitodo (cd kitodo-production-master/Kitodo-DataManagement && mvn flyway:baseline -Pflyway && mvn flyway:migrate -Pflyway) mysqldump -u kitodo --password=kitodo kitodo > kitodo-3.sql Create zip archive with directories and config files mkdir zip zip/config zip/debug zip/import zip/logs zip/messages zip/metadata zip/plugins zip/plugins/command zip/plugins/import zip/plugins/opac zip/plugins/step zip/plugins/validation zip/rulesets zip/scripts zip/swap zip/temp zip/users zip/xslt zip/diagrams install -m 444 kitodo-production-master/Kitodo/src/main/resources/kitodo_*.xml zip/config/ install -m 444 kitodo-production-master/Kitodo/src/main/resources/docket*.xsl zip/xslt/ install -m 444 kitodo-production-master/Kitodo/rulesets/*.xml zip/rulesets/ install -m 444 kitodo-production-master/Kitodo/diagrams/*.xml zip/diagrams/ install -m 554 kitodo-production-master/Kitodo/scripts/*.sh zip/scripts/ chmod -w zip/config zip/import zip/messages zip/plugins zip/plugins/command zip/plugins/import zip/plugins/opac zip/plugins/step zip/plugins/validation zip/rulesets zip/scripts zip/xslt (cd zip && zip -r ../kitodo-3-config.zip *) Note: Create messages directory only in the case when you want to add / edit your own translations. Only those translation files will be used, not the one from class path. Results war file: kitodo-3.war modules: kitodo-3-modules.zip sql dump: kitodo-3.sql zip file: kitodo-3-config.zip 3. Deployment Add Elasticsearch 5.x repository sudo apt install -y apt-transport-https wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - && echo \"deb https://artifacts.elastic.co/packages/5.x/apt stable main\" | sudo tee -a /etc/apt/sources.list.d/elastic-5.x.list Install packages tomcat8, elasticsearch and curl sudo apt update && sudo apt install -y tomcat8 elasticsearch curl Configure Tomcat sudo sed -i 's/JAVA_OPTS=\"-Djava.awt.headless=true/JAVA_OPTS=\"-Djava.awt.headless=true -Xmx1920m/' /etc/default/tomcat8 Configure MySQL sudo sh -c \"echo '[mysqld] innodb_file_per_table' >> /etc/mysql/my.cnf\" sudo service mysql restart Configure ElasticSearch sudo sed -i 's/#path.data: \\/path\\/to\\/data/path.data: \\/var\\/lib\\/elasticsearch/' /etc/elasticsearch/elasticsearch.yml sudo sed -i 's/#path.logs: \\/path\\/to\\/logs/path.logs: \\/var\\/log\\/elasticsearch/' /etc/elasticsearch/elasticsearch.yml sudo sed -i 's/#cluster.name: my-application/cluster.name: kitodo/' /etc/elasticsearch/elasticsearch.yml sudo sed -i 's/#node.name: node-1/node.name: kitodo-1/' /etc/elasticsearch/elasticsearch.yml sudo /bin/systemctl daemon-reload sudo /bin/systemctl enable elasticsearch.service sudo systemctl start elasticsearch.service Other ElasticSearch settings can be adjusted in kitodo_config.properties file: elasticsearch.host=localhost elasticsearch.port=9200 elasticsearch.protocol=http elasticsearch.index=kitodo elasticsearch.batch=1000 elasticsearch.useAuthentication=true elasticsearch.user=kitodo elasticsearch.password=kitodo Create directories and set permissions sudo mkdir /usr/local/kitodo sudo unzip kitodo-3-config.zip -d /usr/local/kitodo sudo chown -R tomcat8:tomcat8 /usr/local/kitodo Install modules sudo mkdir /usr/local/kitodo/modules sudo unzip kitodo-3-modules.zip -d /usr/local/kitodo/modules sudo chown -R tomcat8:tomcat8 /usr/local/kitodo/modules Deploy war file into Tomcat sudo chown tomcat8:tomcat8 kitodo-3.war sudo mv kitodo-3.war /var/lib/tomcat8/webapps/kitodo.war until curl -s GET \"localhost:8080/kitodo/pages/login.jsf\" | grep -q -o \"KITODO.PRODUCTION\" ; do sleep 1; done Login http://localhost:8080/kitodo/ user: testAdmin pass: test Index example data Menu System: http://localhost:8080/kitodo/pages/system.jsf Delete ElasticSearch index Create ElasticSearch mapping Whole Index / Start indexing 4. Updates Download sources rm -rf kitodo-production-master wget https://github.com/kitodo/kitodo-production/archive/master.zip unzip master.zip && rm master.zip Reset database sudo mysql -e \"drop database kitodo;\" sudo mysql -e \"create database kitodo;grant all privileges on kitodo.* to kitodo@localhost identified by 'kitodo';flush privileges;\" cat kitodo-production-master/Kitodo/setup/schema.sql | mysql -u kitodo -D kitodo --password=kitodo cat kitodo-production-master/Kitodo/setup/default.sql | mysql -u kitodo -D kitodo --password=kitodo (cd kitodo-production-master/Kitodo-DataManagement && mvn flyway:baseline -Pflyway && mvn flyway:migrate -Pflyway) Rebuild and deploy war file (cd kitodo-production-master/ && mvn clean package '-P!development') sudo rm -f /usr/local/kitodo/modules/* sudo cp kitodo-production-master/Kitodo/modules/*.jar /usr/local/kitodo/modules sudo chown -R tomcat8:tomcat8 /usr/local/kitodo/modules mv kitodo-production-master/Kitodo/target/kitodo-3*.war kitodo-3.war sudo chown tomcat8:tomcat8 kitodo-3.war sudo mv kitodo-3.war /var/lib/tomcat8/webapps/kitodo.war sleep 5 until curl -s GET \"localhost:8080/kitodo/pages/login.jsf\" | grep -q -o \"KITODO.PRODUCTION\" ; do sleep 1; done Note: If the update provides new example data, it has to be copied from kitodo-production-master/Kitodo/... to /usr/local/kitodo/... manually. Reset index http://localhost:8080/kitodo/pages/system.jsf Delete ElasticSearch index Create ElasticSearch mapping Whole Index / Start indexing","title":"Build development version"},{"location":"developer/gettingstarted/development-version/#build-development-version-of-kitodo-3x","text":"","title":"Build development version of Kitodo 3.x"},{"location":"developer/gettingstarted/development-version/#1-system-environment","text":"Download and install Debian 9.4 .","title":"1. System environment"},{"location":"developer/gettingstarted/development-version/#install-sudo-and-reboot","text":"su -c \"apt install -y sudo && adduser $USER sudo && echo \\\"Defaults timestamp_timeout=300\\\" >> /etc/sudoers.d/timeout && reboot\"","title":"Install sudo and reboot"},{"location":"developer/gettingstarted/development-version/#2-build-files-for-deployment","text":"","title":"2. Build files for deployment"},{"location":"developer/gettingstarted/development-version/#add-mysqlcom-57-repository","text":"sudo apt install -y dirmngr sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 5072E1F5 && echo \"deb http://repo.mysql.com/apt/debian/ stretch mysql-5.7\" | sudo tee -a /etc/apt/sources.list.d/mysql-5.7.list","title":"Add mysql.com 5.7 repository"},{"location":"developer/gettingstarted/development-version/#install-openjdk-11","text":"echo 'deb http://ftp.debian.org/debian stretch-backports main' | sudo tee /etc/apt/sources.list.d/stretch-backports.list sudo apt update && sudo apt install -y openjdk-11-jdk","title":"Install openjdk-11"},{"location":"developer/gettingstarted/development-version/#install-packages-maven-mysql-community-server-and-zip","text":"sudo debconf-set-selections <<< \"mysql-community-server mysql-community-server/root-pass password \" sudo debconf-set-selections <<< \"mysql-community-server mysql-community-server/re-root-pass password \" sudo apt update && sudo apt install -y maven mysql-community-server zip","title":"Install packages maven, mysql-community-server and zip"},{"location":"developer/gettingstarted/development-version/#change-java-security-config-for-cloud-environments","text":"sudo sed -i 's/securerandom.source=file:\\/dev\\/random/securerandom.source=file:\\/dev\\/urandom/' /etc/java-11-openjdk/security/java.security","title":"Change java security config (for cloud environments)"},{"location":"developer/gettingstarted/development-version/#build-development-version-and-modules","text":"wget https://github.com/kitodo/kitodo-production/archive/master.zip unzip master.zip && rm master.zip (cd kitodo-production-master/ && mvn clean package '-P!development') zip -j kitodo-3-modules.zip kitodo-production-master/Kitodo/modules/*.jar mv kitodo-production-master/Kitodo/target/kitodo-3*.war kitodo-3.war Note: If you want to build a release version, you may want to set the version in pom.xml files before packaging","title":"Build development version and modules"},{"location":"developer/gettingstarted/development-version/#create-mysql-database-and-user","text":"sudo mysql -e \"create database kitodo;grant all privileges on kitodo.* to kitodo@localhost identified by 'kitodo';flush privileges;\"","title":"Create MySQL database and user"},{"location":"developer/gettingstarted/development-version/#generate-sql-dump-flyway-migration","text":"cat kitodo-production-master/Kitodo/setup/schema.sql | mysql -u kitodo -D kitodo --password=kitodo cat kitodo-production-master/Kitodo/setup/default.sql | mysql -u kitodo -D kitodo --password=kitodo (cd kitodo-production-master/Kitodo-DataManagement && mvn flyway:baseline -Pflyway && mvn flyway:migrate -Pflyway) mysqldump -u kitodo --password=kitodo kitodo > kitodo-3.sql","title":"Generate SQL dump (flyway migration)"},{"location":"developer/gettingstarted/development-version/#create-zip-archive-with-directories-and-config-files","text":"mkdir zip zip/config zip/debug zip/import zip/logs zip/messages zip/metadata zip/plugins zip/plugins/command zip/plugins/import zip/plugins/opac zip/plugins/step zip/plugins/validation zip/rulesets zip/scripts zip/swap zip/temp zip/users zip/xslt zip/diagrams install -m 444 kitodo-production-master/Kitodo/src/main/resources/kitodo_*.xml zip/config/ install -m 444 kitodo-production-master/Kitodo/src/main/resources/docket*.xsl zip/xslt/ install -m 444 kitodo-production-master/Kitodo/rulesets/*.xml zip/rulesets/ install -m 444 kitodo-production-master/Kitodo/diagrams/*.xml zip/diagrams/ install -m 554 kitodo-production-master/Kitodo/scripts/*.sh zip/scripts/ chmod -w zip/config zip/import zip/messages zip/plugins zip/plugins/command zip/plugins/import zip/plugins/opac zip/plugins/step zip/plugins/validation zip/rulesets zip/scripts zip/xslt (cd zip && zip -r ../kitodo-3-config.zip *) Note: Create messages directory only in the case when you want to add / edit your own translations. Only those translation files will be used, not the one from class path.","title":"Create zip archive with directories and config files"},{"location":"developer/gettingstarted/development-version/#results","text":"war file: kitodo-3.war modules: kitodo-3-modules.zip sql dump: kitodo-3.sql zip file: kitodo-3-config.zip","title":"Results"},{"location":"developer/gettingstarted/development-version/#3-deployment","text":"","title":"3. Deployment"},{"location":"developer/gettingstarted/development-version/#add-elasticsearch-5x-repository","text":"sudo apt install -y apt-transport-https wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - && echo \"deb https://artifacts.elastic.co/packages/5.x/apt stable main\" | sudo tee -a /etc/apt/sources.list.d/elastic-5.x.list","title":"Add Elasticsearch 5.x repository"},{"location":"developer/gettingstarted/development-version/#install-packages-tomcat8-elasticsearch-and-curl","text":"sudo apt update && sudo apt install -y tomcat8 elasticsearch curl","title":"Install packages tomcat8, elasticsearch and curl"},{"location":"developer/gettingstarted/development-version/#configure-tomcat","text":"sudo sed -i 's/JAVA_OPTS=\"-Djava.awt.headless=true/JAVA_OPTS=\"-Djava.awt.headless=true -Xmx1920m/' /etc/default/tomcat8","title":"Configure Tomcat"},{"location":"developer/gettingstarted/development-version/#configure-mysql","text":"sudo sh -c \"echo '[mysqld] innodb_file_per_table' >> /etc/mysql/my.cnf\" sudo service mysql restart","title":"Configure MySQL"},{"location":"developer/gettingstarted/development-version/#configure-elasticsearch","text":"sudo sed -i 's/#path.data: \\/path\\/to\\/data/path.data: \\/var\\/lib\\/elasticsearch/' /etc/elasticsearch/elasticsearch.yml sudo sed -i 's/#path.logs: \\/path\\/to\\/logs/path.logs: \\/var\\/log\\/elasticsearch/' /etc/elasticsearch/elasticsearch.yml sudo sed -i 's/#cluster.name: my-application/cluster.name: kitodo/' /etc/elasticsearch/elasticsearch.yml sudo sed -i 's/#node.name: node-1/node.name: kitodo-1/' /etc/elasticsearch/elasticsearch.yml sudo /bin/systemctl daemon-reload sudo /bin/systemctl enable elasticsearch.service sudo systemctl start elasticsearch.service Other ElasticSearch settings can be adjusted in kitodo_config.properties file: elasticsearch.host=localhost elasticsearch.port=9200 elasticsearch.protocol=http elasticsearch.index=kitodo elasticsearch.batch=1000 elasticsearch.useAuthentication=true elasticsearch.user=kitodo elasticsearch.password=kitodo","title":"Configure ElasticSearch"},{"location":"developer/gettingstarted/development-version/#create-directories-and-set-permissions","text":"sudo mkdir /usr/local/kitodo sudo unzip kitodo-3-config.zip -d /usr/local/kitodo sudo chown -R tomcat8:tomcat8 /usr/local/kitodo","title":"Create directories and set permissions"},{"location":"developer/gettingstarted/development-version/#install-modules","text":"sudo mkdir /usr/local/kitodo/modules sudo unzip kitodo-3-modules.zip -d /usr/local/kitodo/modules sudo chown -R tomcat8:tomcat8 /usr/local/kitodo/modules","title":"Install modules"},{"location":"developer/gettingstarted/development-version/#deploy-war-file-into-tomcat","text":"sudo chown tomcat8:tomcat8 kitodo-3.war sudo mv kitodo-3.war /var/lib/tomcat8/webapps/kitodo.war until curl -s GET \"localhost:8080/kitodo/pages/login.jsf\" | grep -q -o \"KITODO.PRODUCTION\" ; do sleep 1; done","title":"Deploy war file into Tomcat"},{"location":"developer/gettingstarted/development-version/#login","text":"http://localhost:8080/kitodo/ user: testAdmin pass: test","title":"Login"},{"location":"developer/gettingstarted/development-version/#index-example-data","text":"Menu System: http://localhost:8080/kitodo/pages/system.jsf Delete ElasticSearch index Create ElasticSearch mapping Whole Index / Start indexing","title":"Index example data"},{"location":"developer/gettingstarted/development-version/#4-updates","text":"","title":"4. Updates"},{"location":"developer/gettingstarted/development-version/#download-sources","text":"rm -rf kitodo-production-master wget https://github.com/kitodo/kitodo-production/archive/master.zip unzip master.zip && rm master.zip","title":"Download sources"},{"location":"developer/gettingstarted/development-version/#reset-database","text":"sudo mysql -e \"drop database kitodo;\" sudo mysql -e \"create database kitodo;grant all privileges on kitodo.* to kitodo@localhost identified by 'kitodo';flush privileges;\" cat kitodo-production-master/Kitodo/setup/schema.sql | mysql -u kitodo -D kitodo --password=kitodo cat kitodo-production-master/Kitodo/setup/default.sql | mysql -u kitodo -D kitodo --password=kitodo (cd kitodo-production-master/Kitodo-DataManagement && mvn flyway:baseline -Pflyway && mvn flyway:migrate -Pflyway)","title":"Reset database"},{"location":"developer/gettingstarted/development-version/#rebuild-and-deploy-war-file","text":"(cd kitodo-production-master/ && mvn clean package '-P!development') sudo rm -f /usr/local/kitodo/modules/* sudo cp kitodo-production-master/Kitodo/modules/*.jar /usr/local/kitodo/modules sudo chown -R tomcat8:tomcat8 /usr/local/kitodo/modules mv kitodo-production-master/Kitodo/target/kitodo-3*.war kitodo-3.war sudo chown tomcat8:tomcat8 kitodo-3.war sudo mv kitodo-3.war /var/lib/tomcat8/webapps/kitodo.war sleep 5 until curl -s GET \"localhost:8080/kitodo/pages/login.jsf\" | grep -q -o \"KITODO.PRODUCTION\" ; do sleep 1; done Note: If the update provides new example data, it has to be copied from kitodo-production-master/Kitodo/... to /usr/local/kitodo/... manually.","title":"Rebuild and deploy war file"},{"location":"developer/gettingstarted/development-version/#reset-index","text":"http://localhost:8080/kitodo/pages/system.jsf Delete ElasticSearch index Create ElasticSearch mapping Whole Index / Start indexing","title":"Reset index"},{"location":"developer/gettingstarted/eclipse-windows/","text":"How to create a developer workspace for Kitodo.Production with Eclipse on Windows Prerequisites: Make sure you have Java SE Development Kit in at least version 11 installed Make sure you have Git installed Make sure you have Maven installed Make sure you have Eclipse IDE for Java EE Developers installed Configure the PATH s Make sure the Maven bin directory is on your PATH , and that JAVA_HOME points to the root directory of the JDK (not the JRE). Right-click the start menu, select System , Extended system settings , Environment variables to do so. Be careful when you try to add an entry to the path: Click New , then type at least one character into the appearing text box before clicking Browse\u2026 . Otherwise, instead, the last entry in the list will be replaced. You need to restart an open cmd.exe window for the changes to take effect. Make sure the path of your Eclipse Workspace does not contain any dot. To check this, right-click on your Eclipse workspace folder in Windows Explorer, select Properties, Security, and examine the object name. If necessary, move your workspace or create a new one in a suitable location. Get the source code If you have not done yet, fork the project repository on GitHub. Use Git (using a tool like TortoiseGit , or the command line) to clone the repository as a subdirectory into your Eclipse workspace. Create the data-file structure Create the data-file structure required by Kitodo.Production (outside the Eclipse workspace): mkdir config debug logs messages metadata modules plugins plugins\\command plugins\\import plugins\\opac plugins\\step plugins\\validation rulesets scripts temp users xslt Copy all kitodo_*.xml from Kitodo\\src\\main\\resources\\ into the config directory. Copy the contents of Kitodo\\rulesets\\ to the rulesets directory. Create the following four batch files with the following content in the in the scripts directory: File Content script_createDirMeta.bat mkdir %1 script_createDirUserHome.bat mkdir %2 script_createSymLink.bat mklink /d %2 %1 script_deleteSymLink.bat rmdir %1 Copy *.xsl from Kitodo\\src\\main\\resources\\ to the folder xslt . Create your config-local In the source directory that you just cloned, create a folder named config-local . Copy the following files there: From Kitodo\\src\\main\\resources\\ : * contentServerConfig.xml * hibernate.cfg.xml * kitodo_config.properties From Kitodo-DataManagement\\src\\main\\resources\\db\\config\\ : * flyway.properties Edit the following parameters your copy of kitodo_config.properties to point to the data directories you created. Use forward slashes as separators, and end the path entries with a forward slash. You need to edit the following parameters: * directory.config=D:/path to/config/ * directory.rulesets=D:/path to/rulesets/ * directory.xslt=D:/path to/xslt/ * directory.metadata=D:/path to/metadata/ * directory.users=D:/path to/users/ * directory.temp=D:/path to/temp/ * script_createDirUserHome=D:/path to/scripts/script_createDirUserHome.bat * script_createDirMeta=D:/path to/scripts/script_createDirMeta.bat * script_createSymLink=D:/path to/scripts/script_createSymLink.bat * script_deleteSymLink=D:/path to/scripts/script_deleteSymLink.bat * directory.messages=D:/path to/messages/ * directory.debug=D:/path to/debug/ * directory.modules=D:/path to/modules/ * directory.plugins=D:/path to/plugins/ Edit Kitodo\\src\\main\\resources\\log4j.xml so that <Property name=\"filename\"> points to your D:/path to/logs . Run Maven On the command line, change to the directory you just cloned and execute the following command: mvn clean install Set up the database Create the MqSQL Database and the user: create database kitodo; grant all privileges on kitodo.* to kitodo@localhost identified by \u00b4kitodo\u00b4; flush privileges; First load schema.sql , then default.sql from the folder Kitodo\\setup into the database. There will be warnings because the scripts handle some cases for backward compatibility. You can safely ignore them. Then, change into the subfolder Kitodo-DataManagement and execute the following command to migrate your database: mvn clean install -Pflyway Exclude the Eclipse .project and runtime files from Git Go to the file system and find the .git folder in the project folder in your Eclipse workspace. By default, this folder is hidden, so you need to configure your Explorer to show hidden files and folders to see it. Find the info subfolder in that folder, o create it if it is missing. Find or create a file named exclude (no extension). List any files and directories you need to exclude in that file. Sometimes you need to restart Eclipse for changes to take effect. Example content: **/.classpath **/.project **/.settings Configure Eclipse Eclipse\u2019s Maven import will create a lot of projects in your workspace which all need a bit of configuration, as listed below. You can simplify this by creating a new workspace and only configure the workspace settings once accordingly. Add projects: In Eclipse, select File , Import , Maven , Existing Maven project . Point the root directory to your project directory and import all projects. Tomcat: You have to increase the Tomcat startup time-out. You can do so from the server in the Servers view. If the Tomcat is not yet listed, select Window , Preferences , Server , Runtime Environments and add it there. Double-click the server in the Servers view, extend the time-out on the appearing page under Timeouts . You have to click save for the changes to take effect. I also recommend to open the launch configuration (from the same page), Arguments , and add -Xmx3g to VM arguments . Code formatter: Import config\\Kitodo-IDE-formatting-Eclipse.xml and set the code formatter to use the imported Kitodo-Java Formatter Settings . Imports: The project has decided not to import packages, but only to explicitly import used classes, and to sort them alphabetically. Go to the Organize Imports page, remove all packages to be handled specially from the list, and set the both Number of inputs needed values to something like 2147483647 . Checkstyle: Get the Checkstyle plug-in and configure it to use the config file config\\checkstyle.xml . Prepare the web application For any further steps and throughout all development, make sure Elasticsearch is running. You start it by running elasticsearch.bat in the bin folder of the unzipped installation. In Eclipse, right-click on the kitodo project, select run as, run on server, to launch Kitodo.Production in your Tomcat. Access the web application under http:// localhost:8080/kitodo and log in as user testadmin with password test . From the navigation menu, select Indexing . First, create the elasticsearch mapping by clicking the corresponding button on the top of the page. Then, create the whole index by clicking on the start indexing button on the bottom of the page. When this has finished, you have to log out and back into the web application.","title":"Eclipse on Windows"},{"location":"developer/gettingstarted/eclipse-windows/#how-to-create-a-developer-workspace-for-kitodoproduction-with-eclipse-on-windows","text":"","title":"How to create a developer workspace for Kitodo.Production with Eclipse on Windows"},{"location":"developer/gettingstarted/eclipse-windows/#prerequisites","text":"Make sure you have Java SE Development Kit in at least version 11 installed Make sure you have Git installed Make sure you have Maven installed Make sure you have Eclipse IDE for Java EE Developers installed","title":"Prerequisites:"},{"location":"developer/gettingstarted/eclipse-windows/#configure-the-paths","text":"Make sure the Maven bin directory is on your PATH , and that JAVA_HOME points to the root directory of the JDK (not the JRE). Right-click the start menu, select System , Extended system settings , Environment variables to do so. Be careful when you try to add an entry to the path: Click New , then type at least one character into the appearing text box before clicking Browse\u2026 . Otherwise, instead, the last entry in the list will be replaced. You need to restart an open cmd.exe window for the changes to take effect. Make sure the path of your Eclipse Workspace does not contain any dot. To check this, right-click on your Eclipse workspace folder in Windows Explorer, select Properties, Security, and examine the object name. If necessary, move your workspace or create a new one in a suitable location.","title":"Configure the PATHs"},{"location":"developer/gettingstarted/eclipse-windows/#get-the-source-code","text":"If you have not done yet, fork the project repository on GitHub. Use Git (using a tool like TortoiseGit , or the command line) to clone the repository as a subdirectory into your Eclipse workspace.","title":"Get the source code"},{"location":"developer/gettingstarted/eclipse-windows/#create-the-data-file-structure","text":"Create the data-file structure required by Kitodo.Production (outside the Eclipse workspace): mkdir config debug logs messages metadata modules plugins plugins\\command plugins\\import plugins\\opac plugins\\step plugins\\validation rulesets scripts temp users xslt Copy all kitodo_*.xml from Kitodo\\src\\main\\resources\\ into the config directory. Copy the contents of Kitodo\\rulesets\\ to the rulesets directory. Create the following four batch files with the following content in the in the scripts directory: File Content script_createDirMeta.bat mkdir %1 script_createDirUserHome.bat mkdir %2 script_createSymLink.bat mklink /d %2 %1 script_deleteSymLink.bat rmdir %1 Copy *.xsl from Kitodo\\src\\main\\resources\\ to the folder xslt .","title":"Create the data-file structure"},{"location":"developer/gettingstarted/eclipse-windows/#create-your-config-local","text":"In the source directory that you just cloned, create a folder named config-local . Copy the following files there: From Kitodo\\src\\main\\resources\\ : * contentServerConfig.xml * hibernate.cfg.xml * kitodo_config.properties From Kitodo-DataManagement\\src\\main\\resources\\db\\config\\ : * flyway.properties Edit the following parameters your copy of kitodo_config.properties to point to the data directories you created. Use forward slashes as separators, and end the path entries with a forward slash. You need to edit the following parameters: * directory.config=D:/path to/config/ * directory.rulesets=D:/path to/rulesets/ * directory.xslt=D:/path to/xslt/ * directory.metadata=D:/path to/metadata/ * directory.users=D:/path to/users/ * directory.temp=D:/path to/temp/ * script_createDirUserHome=D:/path to/scripts/script_createDirUserHome.bat * script_createDirMeta=D:/path to/scripts/script_createDirMeta.bat * script_createSymLink=D:/path to/scripts/script_createSymLink.bat * script_deleteSymLink=D:/path to/scripts/script_deleteSymLink.bat * directory.messages=D:/path to/messages/ * directory.debug=D:/path to/debug/ * directory.modules=D:/path to/modules/ * directory.plugins=D:/path to/plugins/ Edit Kitodo\\src\\main\\resources\\log4j.xml so that <Property name=\"filename\"> points to your D:/path to/logs .","title":"Create your config-local"},{"location":"developer/gettingstarted/eclipse-windows/#run-maven","text":"On the command line, change to the directory you just cloned and execute the following command: mvn clean install","title":"Run Maven"},{"location":"developer/gettingstarted/eclipse-windows/#set-up-the-database","text":"Create the MqSQL Database and the user: create database kitodo; grant all privileges on kitodo.* to kitodo@localhost identified by \u00b4kitodo\u00b4; flush privileges; First load schema.sql , then default.sql from the folder Kitodo\\setup into the database. There will be warnings because the scripts handle some cases for backward compatibility. You can safely ignore them. Then, change into the subfolder Kitodo-DataManagement and execute the following command to migrate your database: mvn clean install -Pflyway","title":"Set up the database"},{"location":"developer/gettingstarted/eclipse-windows/#exclude-the-eclipse-project-and-runtime-files-from-git","text":"Go to the file system and find the .git folder in the project folder in your Eclipse workspace. By default, this folder is hidden, so you need to configure your Explorer to show hidden files and folders to see it. Find the info subfolder in that folder, o create it if it is missing. Find or create a file named exclude (no extension). List any files and directories you need to exclude in that file. Sometimes you need to restart Eclipse for changes to take effect. Example content: **/.classpath **/.project **/.settings","title":"Exclude the Eclipse .project and runtime files from Git"},{"location":"developer/gettingstarted/eclipse-windows/#configure-eclipse","text":"Eclipse\u2019s Maven import will create a lot of projects in your workspace which all need a bit of configuration, as listed below. You can simplify this by creating a new workspace and only configure the workspace settings once accordingly. Add projects: In Eclipse, select File , Import , Maven , Existing Maven project . Point the root directory to your project directory and import all projects. Tomcat: You have to increase the Tomcat startup time-out. You can do so from the server in the Servers view. If the Tomcat is not yet listed, select Window , Preferences , Server , Runtime Environments and add it there. Double-click the server in the Servers view, extend the time-out on the appearing page under Timeouts . You have to click save for the changes to take effect. I also recommend to open the launch configuration (from the same page), Arguments , and add -Xmx3g to VM arguments . Code formatter: Import config\\Kitodo-IDE-formatting-Eclipse.xml and set the code formatter to use the imported Kitodo-Java Formatter Settings . Imports: The project has decided not to import packages, but only to explicitly import used classes, and to sort them alphabetically. Go to the Organize Imports page, remove all packages to be handled specially from the list, and set the both Number of inputs needed values to something like 2147483647 . Checkstyle: Get the Checkstyle plug-in and configure it to use the config file config\\checkstyle.xml .","title":"Configure Eclipse"},{"location":"developer/gettingstarted/eclipse-windows/#prepare-the-web-application","text":"For any further steps and throughout all development, make sure Elasticsearch is running. You start it by running elasticsearch.bat in the bin folder of the unzipped installation. In Eclipse, right-click on the kitodo project, select run as, run on server, to launch Kitodo.Production in your Tomcat. Access the web application under http:// localhost:8080/kitodo and log in as user testadmin with password test . From the navigation menu, select Indexing . First, create the elasticsearch mapping by clicking the corresponding button on the top of the page. Then, create the whole index by clicking on the start indexing button on the bottom of the page. When this has finished, you have to log out and back into the web application.","title":"Prepare the web application"},{"location":"developer/gettingstarted/gettingstarted/","text":"GettingStarted","title":"GettingStarted"},{"location":"developer/gettingstarted/gettingstarted/#gettingstarted","text":"","title":"GettingStarted"},{"location":"developer/gettingstarted/virtualbox/","text":"Create VirtualBox appliance for Kitodo 3.x Download Debian 9.5 ISO file Download debian-9.5.0-amd64-netinst.iso from https://cdimage.debian.org/debian-cd/9.5.0/amd64/iso-cd/ Create Virtual Machine Name: kitodo 3.0.0-beta.1 Type: Linux Version: Debian (64-bit) Memory size: 4096 MB Hard disk: VDI / dynamically allocated / 20 GB Virtual Machine settings General/Advanced/Shared clipboard: Bidirectional System/Processor/Processor(s): 2 System/Processor/Extended Features: Enable PAE/NX Display/Screen/Video Memory: 128 MB Network/Adapter 1/Advanced/Port Forwarding/+ Host Port: 8080 Guest Port: 8080 Start Virtual Machine Select downloaded file debian-9.5.0-amd64-netinst.iso Debian install screen Select Graphical install Language: English Location: United States Keyboard: German Hostname: kitodo Domain: (blank) Root password: kitodo Full name: kitodo User name: kitodo User password: kitodo Time zone: Eastern Partitioning method: Guided - use entire disk Partitioning scheme: All files in one partition Mirror: Germany/ftp.de.debian.org Proxy: (blank) Software: deselect print server Install VirtualBox guest additions (shared clipboard) and reboot su -c 'echo \"deb http://ftp.debian.org/debian stretch-backports main contrib\" > /etc/apt/sources.list.d/stretch-backports.list && apt update && apt install -y virtualbox-guest-dkms virtualbox-guest-x11 linux-headers-$(uname -r) && reboot' Install Kitodo Follow the installation instructions in https://github.com/kitodo/kitodo-production/wiki/Installationsanleitung-f%C3%BCr-Kitodo.Production-3.x Make sure to install Java 11 when using Kitodo.Production v3.4 and above, see instructions . Create shortcuts Website link echo '[Desktop Entry] Encoding=UTF-8 Name=Kitodo.Production Type=Link URL=http://localhost:8080/kitodo/ Icon=text-html' >> ~/Desktop/Kitodo.Production.desktop Symlink to folders ln -s /usr/local/kitodo ~/Desktop/kitodo-config ln -s /var/lib/tomcat8/webapps/ ~/Desktop/kitodo-app Save password in Firefox Login at http://localhost:8080/kitodo/ with user testAdmin and password `test Click save in popup dialog to let Firefox save this login Export Appliance VirtualBox Manager / File / Export Appliance File: kitodo-production-3.0.0-beta.1.ova Product: Kitodo Production Product-URL: http://www.kitodo.org Version: 3.0.0-beta.1 Description: This VirtualBox appliance is intended for development and tests in local networks. Do not use it in production mode! The Kitodo.production webapp should be available from guest and host system (via NAT Port Forwarding) at: * http://localhost:8080/kitodo/ * user: testAdmin * pass: test The appliance is based on debian 9.4, openjdk-8, tomcat8, mysql 5.7 and elasticsearch 5.x * system user: kitodo, root * system user password: kitodo * system root password: kitodo * mysql user: kitodo * mysql user password: kitodo * mysql root password: (blank) License: GPLv3 https://www.gnu.org/licenses/gpl-3.0.en.html","title":"Create VirtualBox Appliance"},{"location":"developer/gettingstarted/virtualbox/#create-virtualbox-appliance-for-kitodo-3x","text":"","title":"Create VirtualBox appliance for Kitodo 3.x"},{"location":"developer/gettingstarted/virtualbox/#download-debian-95-iso-file","text":"Download debian-9.5.0-amd64-netinst.iso from https://cdimage.debian.org/debian-cd/9.5.0/amd64/iso-cd/","title":"Download Debian 9.5 ISO file"},{"location":"developer/gettingstarted/virtualbox/#create-virtual-machine","text":"Name: kitodo 3.0.0-beta.1 Type: Linux Version: Debian (64-bit) Memory size: 4096 MB Hard disk: VDI / dynamically allocated / 20 GB","title":"Create Virtual Machine"},{"location":"developer/gettingstarted/virtualbox/#virtual-machine-settings","text":"General/Advanced/Shared clipboard: Bidirectional System/Processor/Processor(s): 2 System/Processor/Extended Features: Enable PAE/NX Display/Screen/Video Memory: 128 MB Network/Adapter 1/Advanced/Port Forwarding/+ Host Port: 8080 Guest Port: 8080","title":"Virtual Machine settings"},{"location":"developer/gettingstarted/virtualbox/#start-virtual-machine","text":"Select downloaded file debian-9.5.0-amd64-netinst.iso","title":"Start Virtual Machine"},{"location":"developer/gettingstarted/virtualbox/#debian-install-screen","text":"Select Graphical install Language: English Location: United States Keyboard: German Hostname: kitodo Domain: (blank) Root password: kitodo Full name: kitodo User name: kitodo User password: kitodo Time zone: Eastern Partitioning method: Guided - use entire disk Partitioning scheme: All files in one partition Mirror: Germany/ftp.de.debian.org Proxy: (blank) Software: deselect print server","title":"Debian install screen"},{"location":"developer/gettingstarted/virtualbox/#install-virtualbox-guest-additions-shared-clipboard-and-reboot","text":"su -c 'echo \"deb http://ftp.debian.org/debian stretch-backports main contrib\" > /etc/apt/sources.list.d/stretch-backports.list && apt update && apt install -y virtualbox-guest-dkms virtualbox-guest-x11 linux-headers-$(uname -r) && reboot'","title":"Install VirtualBox guest additions (shared clipboard) and reboot"},{"location":"developer/gettingstarted/virtualbox/#install-kitodo","text":"Follow the installation instructions in https://github.com/kitodo/kitodo-production/wiki/Installationsanleitung-f%C3%BCr-Kitodo.Production-3.x Make sure to install Java 11 when using Kitodo.Production v3.4 and above, see instructions .","title":"Install Kitodo"},{"location":"developer/gettingstarted/virtualbox/#create-shortcuts","text":"Website link echo '[Desktop Entry] Encoding=UTF-8 Name=Kitodo.Production Type=Link URL=http://localhost:8080/kitodo/ Icon=text-html' >> ~/Desktop/Kitodo.Production.desktop Symlink to folders ln -s /usr/local/kitodo ~/Desktop/kitodo-config ln -s /var/lib/tomcat8/webapps/ ~/Desktop/kitodo-app","title":"Create shortcuts"},{"location":"developer/gettingstarted/virtualbox/#save-password-in-firefox","text":"Login at http://localhost:8080/kitodo/ with user testAdmin and password `test Click save in popup dialog to let Firefox save this login","title":"Save password in Firefox"},{"location":"developer/gettingstarted/virtualbox/#export-appliance","text":"VirtualBox Manager / File / Export Appliance File: kitodo-production-3.0.0-beta.1.ova Product: Kitodo Production Product-URL: http://www.kitodo.org Version: 3.0.0-beta.1 Description: This VirtualBox appliance is intended for development and tests in local networks. Do not use it in production mode! The Kitodo.production webapp should be available from guest and host system (via NAT Port Forwarding) at: * http://localhost:8080/kitodo/ * user: testAdmin * pass: test The appliance is based on debian 9.4, openjdk-8, tomcat8, mysql 5.7 and elasticsearch 5.x * system user: kitodo, root * system user password: kitodo * system root password: kitodo * mysql user: kitodo * mysql user password: kitodo * mysql root password: (blank) License: GPLv3 https://www.gnu.org/licenses/gpl-3.0.en.html","title":"Export Appliance"},{"location":"developer/guidelines/","text":"Allgemein Arbeit in GIT nach dem Forking Workflow Einhaltung der Coding Guidelines zu entwickelnde Features sollten als Issue vor dem Pull-Request bekannt gemacht werden Fork Branch Hinweise: Jeder Branch sollte in sich geschlossen sein und nur genau die \u00c4nderungen beinhalten, die n\u00f6tig sind k\u00f6nnen zum Bearbeiten eines Features entweder in privaten, pers\u00f6nlichen Forks oder in einem Fork einer GitHub-Organisation durch mehrere Personen durchgef\u00fchrt werden Commits in englischer Sprache, Orientierung an bspw. http://chris.beams.io/posts/git-commit/ Commits sollten nur die \u00c4nderungen enthalten, die auch in der Commit Nachricht beschrieben sind eher viele kleine Commits mit jeweils wenigen \u00c4nderungen als wenige, gro\u00dfe / umfangreiche Commits Pull-Requests sollten idealerweise von einer anderen Person als dem Ersteller auf GitHub begutachtet (review changes) werden. m\u00fcssen zum Zeitpunkt des Merges fehlerfrei integrierbar sein. Konflikte m\u00fcssen vom Ersteller gel\u00f6st werden. Branch Unterscheidung Unterscheidung bezieht sich auf die GitHub Projekte Kitodo.ContentServer , Kitodo.Production und Kitodo.UGH Branch 2.x : ist die Weiterentwicklung der alten Goobi.Production Community Edition (Version 1.11.x) unter dem neuen Namen Kitodo.Production und wird als Version 2.x weiter gef\u00fchrt Branch master : die unter dem DFG Projekt gef\u00f6rderten Weiterentwicklung von Kitodo.Production findet hier statt und enth\u00e4lt auch die darauf basierenden betriebenen Entwicklungen","title":"Guidelines"},{"location":"developer/guidelines/#allgemein","text":"Arbeit in GIT nach dem Forking Workflow Einhaltung der Coding Guidelines zu entwickelnde Features sollten als Issue vor dem Pull-Request bekannt gemacht werden Fork Branch Hinweise: Jeder Branch sollte in sich geschlossen sein und nur genau die \u00c4nderungen beinhalten, die n\u00f6tig sind k\u00f6nnen zum Bearbeiten eines Features entweder in privaten, pers\u00f6nlichen Forks oder in einem Fork einer GitHub-Organisation durch mehrere Personen durchgef\u00fchrt werden","title":"Allgemein"},{"location":"developer/guidelines/#commits","text":"in englischer Sprache, Orientierung an bspw. http://chris.beams.io/posts/git-commit/ Commits sollten nur die \u00c4nderungen enthalten, die auch in der Commit Nachricht beschrieben sind eher viele kleine Commits mit jeweils wenigen \u00c4nderungen als wenige, gro\u00dfe / umfangreiche Commits","title":"Commits"},{"location":"developer/guidelines/#pull-requests","text":"sollten idealerweise von einer anderen Person als dem Ersteller auf GitHub begutachtet (review changes) werden. m\u00fcssen zum Zeitpunkt des Merges fehlerfrei integrierbar sein. Konflikte m\u00fcssen vom Ersteller gel\u00f6st werden.","title":"Pull-Requests"},{"location":"developer/guidelines/#branch-unterscheidung","text":"Unterscheidung bezieht sich auf die GitHub Projekte Kitodo.ContentServer , Kitodo.Production und Kitodo.UGH Branch 2.x : ist die Weiterentwicklung der alten Goobi.Production Community Edition (Version 1.11.x) unter dem neuen Namen Kitodo.Production und wird als Version 2.x weiter gef\u00fchrt Branch master : die unter dem DFG Projekt gef\u00f6rderten Weiterentwicklung von Kitodo.Production findet hier statt und enth\u00e4lt auch die darauf basierenden betriebenen Entwicklungen","title":"Branch Unterscheidung"},{"location":"developer/javadoc/","text":"Javadoc Build Javadoc change to the root dir of your git clone build javadoc for all modules in html format in subdirectory javadoc mvn javadoc:aggregate -P generate_developer_docs -Ddoctarget=$(pwd) -Ddocdir=javadoc '-P!development' Read Javadoc Open javadoc/index.html","title":"Javadoc"},{"location":"developer/javadoc/#javadoc","text":"","title":"Javadoc"},{"location":"developer/javadoc/#build-javadoc","text":"change to the root dir of your git clone build javadoc for all modules in html format in subdirectory javadoc mvn javadoc:aggregate -P generate_developer_docs -Ddoctarget=$(pwd) -Ddocdir=javadoc '-P!development'","title":"Build Javadoc"},{"location":"developer/javadoc/#read-javadoc","text":"Open javadoc/index.html","title":"Read Javadoc"},{"location":"developer/tests/","text":"Mutation testing To measure the quality of our tests, we are using the mutation testing framework Pitest . Pitest runs your unit tests against automatically modified versions of your application code. When the application code changes, it should produce different results and cause the unit tests to fail. If a unit test does not fail in this situation, it may indicate an issue with the test suite. To run a mutation test, you have to add the Pitest plugin to build/plugins in your moduls pom.xml. <plugin> <groupId>org.pitest</groupId> <artifactId>pitest-maven</artifactId> <version>LATEST</version> </plugin> By default Pitest will mutate all code in your project/module. You can limit which code is mutated and which tests are run using targetClasses and targetTests . <plugin> <groupId>org.pitest</groupId> <artifactId>pitest-maven</artifactId> <version>LATEST</version> <configuration> <targetClasses> <param>com.your.package.root.want.to.mutate*</param> </targetClasses> <targetTests> <param>com.your.package.root*</param> </targetTests> </configuration> </plugin> The mutation test can be run directly from the commandline mvn org.pitest:pitest-maven:mutationCoverage This will output an html report to target/pit-reports/YYYYMMDDHHMI .","title":"Tests"},{"location":"developer/tests/#mutation-testing","text":"To measure the quality of our tests, we are using the mutation testing framework Pitest . Pitest runs your unit tests against automatically modified versions of your application code. When the application code changes, it should produce different results and cause the unit tests to fail. If a unit test does not fail in this situation, it may indicate an issue with the test suite. To run a mutation test, you have to add the Pitest plugin to build/plugins in your moduls pom.xml. <plugin> <groupId>org.pitest</groupId> <artifactId>pitest-maven</artifactId> <version>LATEST</version> </plugin> By default Pitest will mutate all code in your project/module. You can limit which code is mutated and which tests are run using targetClasses and targetTests . <plugin> <groupId>org.pitest</groupId> <artifactId>pitest-maven</artifactId> <version>LATEST</version> <configuration> <targetClasses> <param>com.your.package.root.want.to.mutate*</param> </targetClasses> <targetTests> <param>com.your.package.root*</param> </targetTests> </configuration> </plugin> The mutation test can be run directly from the commandline mvn org.pitest:pitest-maven:mutationCoverage This will output an html report to target/pit-reports/YYYYMMDDHHMI .","title":"Mutation testing"},{"location":"gettingstarted/use_mariadb/","text":"Use MariaDB instead of MySQL Kitodo.Production application must be built with a connector for MariaDB Hibernate and Flyway configuration must be adjusted to use MariaDB Hibernate configuration modifications must be done in file hibernate.cfg.xml hibernate.dialect for correct dialect look at https://stackoverflow.com/a/51734560 or Hibernate JavaDoc. f.e. use org.hibernate.dialect.MariaDB10Dialect if your MariaDB server is in version 10.1.x hibernate.connection.driver_class instead of com.mysql.jdbc.Driver use org.mariadb.jdbc.Driver maybe this is not needed anymore as in normal cases connection driver class is detected correct by Hibernate hibernate.connection.url instead of jdbc:mysql://... use jdbc:mariadb://... Flyway configuration only needed if you want to migrate your database with help of Flyway modification must be done in file flyway.properties flyway.url instead of jdbc:mysql://... use jdbc:mariadb://...","title":"Use MariaDB instead of MySQL"},{"location":"gettingstarted/use_mariadb/#use-mariadb-instead-of-mysql","text":"Kitodo.Production application must be built with a connector for MariaDB Hibernate and Flyway configuration must be adjusted to use MariaDB","title":"Use MariaDB instead of MySQL"},{"location":"gettingstarted/use_mariadb/#hibernate-configuration","text":"modifications must be done in file hibernate.cfg.xml","title":"Hibernate configuration"},{"location":"gettingstarted/use_mariadb/#hibernatedialect","text":"for correct dialect look at https://stackoverflow.com/a/51734560 or Hibernate JavaDoc. f.e. use org.hibernate.dialect.MariaDB10Dialect if your MariaDB server is in version 10.1.x","title":"hibernate.dialect"},{"location":"gettingstarted/use_mariadb/#hibernateconnectiondriver_class","text":"instead of com.mysql.jdbc.Driver use org.mariadb.jdbc.Driver maybe this is not needed anymore as in normal cases connection driver class is detected correct by Hibernate","title":"hibernate.connection.driver_class"},{"location":"gettingstarted/use_mariadb/#hibernateconnectionurl","text":"instead of jdbc:mysql://... use jdbc:mariadb://...","title":"hibernate.connection.url"},{"location":"gettingstarted/use_mariadb/#flyway-configuration","text":"only needed if you want to migrate your database with help of Flyway modification must be done in file flyway.properties","title":"Flyway configuration"},{"location":"gettingstarted/use_mariadb/#flywayurl","text":"instead of jdbc:mysql://... use jdbc:mariadb://...","title":"flyway.url"},{"location":"gettingstarted/use_secured_activemq/","text":"Securing access to ActiveMQ Using SSL connections Inspired by https://activemq.apache.org/how-do-i-use-ssl Create key and trust store You should create on the server and client side each a key and trust store. The key store should contain the public and private certificates of the client / server side and the trust store should contain the public certificate from the opposite side: on client side the public certificate of the server and on the server side the public certificate of the client(s). Server side Create the server key store: keytool -genkeypair -alias broker -keyalg RSA -keysize 2048 -validity 365 -keystore <path-to-activemq-installation>/conf/broker.ks Export the server certificate (this is needed for the client side trust store) keytool -export -rfc -alias broker -keystore <path-to-activemq-installation>/conf/broker.ks -file server_certificate.pem If you have already an OpenSSL based certificate then you can use this as base to create the keystore: openssl pkcs12 -export -in <fullchain.pem> -inkey <privkey.pem> -out <pkcs.p12> -name <alias> keytool -importkeystore -destkeystore <path-to-activemq-installation>/conf/broker.ks -srckeystore <pkcs.p12> -srcstoretype PKCS12 -alias broker Import the client certificate into the server truststore keytool -import -alias kitodo-production-client -keystore <path-to-activemq-installation>/conf/broker.ts -file <path-to>/kitodo-production-client.pem Client side Create the client key store: keytool -genkeypair -alias <alias> -keyalg RSA -keysize 2048 -validity 365 -keystore /usr/local/kitodo/certs/activemq-client.ks Export the client certificate (this is needed for the server side trust store) keytool -export -rfc -alias kitodo-production-client -keystore /usr/local/kitodo/certs/activemq-client.ks -file /usr/local/kitodo/certs/kitodo-production-client.pem If you have already an OpenSSL based certificate then you can use this as base to create the keystore: openssl pkcs12 -export -in <fullchain.pem> -inkey <privkey.pem> -out <pkcs.p12> -name kitodo-production-client keytool -importkeystore -destkeystore /usr/local/kitodo/certs/activemq-client.ks -srckeystore <pkcs.p12> -srcstoretype PKCS12 -alias kitodo-production-client Import the server certificate into the client truststore keytool -import -alias activemq-server -keystore /usr/local/kitodo/certs/activemq-client.ts -file <path-to>/server_certificate.pem Configure ActiveMQ Adjust the conf/activemq.xml file <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\"> <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"localhost\" dataDirectory=\"${activemq.data}\"> <!-- other options --> <transportConnectors> <!-- maybe other used transportConnectors --> <transportConnector name=\"ssl\" uri=\"ssl://0.0.0.0:61617?needClientAuth=true&amp;transport.verifyHostName=true&amp;maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/> </transportConnectors> <!-- SSL Configuration Context --> <sslContext> <sslContext keyStore=\"file:${activemq.base}/conf/broker.ks\" keyStorePassword=\"UsedPasswordOnCreatingKeyStore\" trustStore=\"file:${activemq.base}/conf/broker.ts\" trustStorePassword=\"UsedPasswordOnCreatingTrustStore\" /> </sslContext> </broker> </beans> Using authentification and authorization See https://activemq.apache.org/security Define authentification Adjust the conf/activemq.xml file <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\"> <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"localhost\" dataDirectory=\"${activemq.data}\"> <!-- other options --> <plugins> <!-- other plugins --> <simpleAuthenticationPlugin> <users> <!-- login details for admin are take from conf/credentials.properties file or should be used from this file --> <authenticationUser username=\"${activemq.username}\" password=\"${activemq.password}\" groups=\"senders,receivers,admins\" /> <authenticationUser username=\"KitodoProductionUser\" password=\"PasswordForUserKitodoProduction\" groups=\"KitodoProductionGroup\" /> <!-- some example users --> <authenticationUser username=\"SomeUserForReadAccess\" password=\"ReadAccessPasswort\" groups=\"receivers\" /> <authenticationUser username=\"SomeUserForWriteAccess\" password=\"WriteAccessPasswort\" groups=\"senders\" /> </users> </simpleAuthenticationPlugin> </plugins> </broker> </beans> Define authorization Adjust the conf/activemq.xml file <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\"> <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"localhost\" dataDirectory=\"${activemq.data}\"> <!-- other options --> <plugins> <!-- other plugins like simpleAuthentificationPlugin --> <authorizationPlugin> <map> <authorizationMap> <authorizationEntries> <!-- global Advisory topic, should be given to any user --> <authorizationEntry topic=\"ActiveMQ.Advisory.>\" write=\"senders,KitodoProductionGroup\" read=\"receivers,KitodoProductionGroup\" admin=\"admins,senders,receivers,KitodoProductionGroup\" /> <!-- Kitodo.Production used queues and topics --> <authorizationEntry queue=\"KitodoProduction.FinalizeStep.Queue\" write=\"senders\" read=\"KitodoProductionGroup\" admin=\"admins,KitodoProductionGroup\" /> <authorizationEntry topic=\"KitodoProduction.ResultMessages.Topic\" write=\"KitodoProductionGroup\" read=\"receivers\" admin=\"admins,KitodoProductionGroup\" /> <!-- other used queues and topics --> </authorizationEntries> </authorizationMap> </map> </authorizationPlugin> </plugins> </broker> </beans>","title":"Securing access to ActiveMQ"},{"location":"gettingstarted/use_secured_activemq/#securing-access-to-activemq","text":"","title":"Securing access to ActiveMQ"},{"location":"gettingstarted/use_secured_activemq/#using-ssl-connections","text":"Inspired by https://activemq.apache.org/how-do-i-use-ssl","title":"Using SSL connections"},{"location":"gettingstarted/use_secured_activemq/#create-key-and-trust-store","text":"You should create on the server and client side each a key and trust store. The key store should contain the public and private certificates of the client / server side and the trust store should contain the public certificate from the opposite side: on client side the public certificate of the server and on the server side the public certificate of the client(s).","title":"Create key and trust store"},{"location":"gettingstarted/use_secured_activemq/#server-side","text":"Create the server key store: keytool -genkeypair -alias broker -keyalg RSA -keysize 2048 -validity 365 -keystore <path-to-activemq-installation>/conf/broker.ks Export the server certificate (this is needed for the client side trust store) keytool -export -rfc -alias broker -keystore <path-to-activemq-installation>/conf/broker.ks -file server_certificate.pem If you have already an OpenSSL based certificate then you can use this as base to create the keystore: openssl pkcs12 -export -in <fullchain.pem> -inkey <privkey.pem> -out <pkcs.p12> -name <alias> keytool -importkeystore -destkeystore <path-to-activemq-installation>/conf/broker.ks -srckeystore <pkcs.p12> -srcstoretype PKCS12 -alias broker Import the client certificate into the server truststore keytool -import -alias kitodo-production-client -keystore <path-to-activemq-installation>/conf/broker.ts -file <path-to>/kitodo-production-client.pem","title":"Server side"},{"location":"gettingstarted/use_secured_activemq/#client-side","text":"Create the client key store: keytool -genkeypair -alias <alias> -keyalg RSA -keysize 2048 -validity 365 -keystore /usr/local/kitodo/certs/activemq-client.ks Export the client certificate (this is needed for the server side trust store) keytool -export -rfc -alias kitodo-production-client -keystore /usr/local/kitodo/certs/activemq-client.ks -file /usr/local/kitodo/certs/kitodo-production-client.pem If you have already an OpenSSL based certificate then you can use this as base to create the keystore: openssl pkcs12 -export -in <fullchain.pem> -inkey <privkey.pem> -out <pkcs.p12> -name kitodo-production-client keytool -importkeystore -destkeystore /usr/local/kitodo/certs/activemq-client.ks -srckeystore <pkcs.p12> -srcstoretype PKCS12 -alias kitodo-production-client Import the server certificate into the client truststore keytool -import -alias activemq-server -keystore /usr/local/kitodo/certs/activemq-client.ts -file <path-to>/server_certificate.pem","title":"Client side"},{"location":"gettingstarted/use_secured_activemq/#configure-activemq","text":"Adjust the conf/activemq.xml file <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\"> <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"localhost\" dataDirectory=\"${activemq.data}\"> <!-- other options --> <transportConnectors> <!-- maybe other used transportConnectors --> <transportConnector name=\"ssl\" uri=\"ssl://0.0.0.0:61617?needClientAuth=true&amp;transport.verifyHostName=true&amp;maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/> </transportConnectors> <!-- SSL Configuration Context --> <sslContext> <sslContext keyStore=\"file:${activemq.base}/conf/broker.ks\" keyStorePassword=\"UsedPasswordOnCreatingKeyStore\" trustStore=\"file:${activemq.base}/conf/broker.ts\" trustStorePassword=\"UsedPasswordOnCreatingTrustStore\" /> </sslContext> </broker> </beans>","title":"Configure ActiveMQ"},{"location":"gettingstarted/use_secured_activemq/#using-authentification-and-authorization","text":"See https://activemq.apache.org/security","title":"Using authentification and authorization"},{"location":"gettingstarted/use_secured_activemq/#define-authentification","text":"Adjust the conf/activemq.xml file <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\"> <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"localhost\" dataDirectory=\"${activemq.data}\"> <!-- other options --> <plugins> <!-- other plugins --> <simpleAuthenticationPlugin> <users> <!-- login details for admin are take from conf/credentials.properties file or should be used from this file --> <authenticationUser username=\"${activemq.username}\" password=\"${activemq.password}\" groups=\"senders,receivers,admins\" /> <authenticationUser username=\"KitodoProductionUser\" password=\"PasswordForUserKitodoProduction\" groups=\"KitodoProductionGroup\" /> <!-- some example users --> <authenticationUser username=\"SomeUserForReadAccess\" password=\"ReadAccessPasswort\" groups=\"receivers\" /> <authenticationUser username=\"SomeUserForWriteAccess\" password=\"WriteAccessPasswort\" groups=\"senders\" /> </users> </simpleAuthenticationPlugin> </plugins> </broker> </beans>","title":"Define authentification"},{"location":"gettingstarted/use_secured_activemq/#define-authorization","text":"Adjust the conf/activemq.xml file <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\"> <broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"localhost\" dataDirectory=\"${activemq.data}\"> <!-- other options --> <plugins> <!-- other plugins like simpleAuthentificationPlugin --> <authorizationPlugin> <map> <authorizationMap> <authorizationEntries> <!-- global Advisory topic, should be given to any user --> <authorizationEntry topic=\"ActiveMQ.Advisory.>\" write=\"senders,KitodoProductionGroup\" read=\"receivers,KitodoProductionGroup\" admin=\"admins,senders,receivers,KitodoProductionGroup\" /> <!-- Kitodo.Production used queues and topics --> <authorizationEntry queue=\"KitodoProduction.FinalizeStep.Queue\" write=\"senders\" read=\"KitodoProductionGroup\" admin=\"admins,KitodoProductionGroup\" /> <authorizationEntry topic=\"KitodoProduction.ResultMessages.Topic\" write=\"KitodoProductionGroup\" read=\"receivers\" admin=\"admins,KitodoProductionGroup\" /> <!-- other used queues and topics --> </authorizationEntries> </authorizationMap> </map> </authorizationPlugin> </plugins> </broker> </beans>","title":"Define authorization"},{"location":"user/migration/","text":"Migration","title":"Migration"},{"location":"user/migration/#migration","text":"","title":"Migration"},{"location":"user/introduction/","text":"Das erste Mal mit Kitodo arbeiten Kitodo wird Ihnen bei der ersten Nutzung sowohl optisch als auch in der Benutzung anders vorkommen. Daher folgt hier eine kurze Zusammenfassung, welche die anf\u00e4ngliche Nutzung von Kitodo unterst\u00fctzen soll. Ein Projekt ohne Produktionsvorlage anlegen Als erstes m\u00fcssen Sie ein Projekt (falls noch nicht vorhanden) anlegen. Dazu klicken Sie im \" Dashboard \" auf \" Projekte \". Anschlie\u00dfend gelangen Sie auf die Seite Projekte . Dort klicken Sie auf den Button \" Neu \" und in der Schaltfl\u00e4che auf \" + Neues Projekt \". Auf der Seite Neues Projekt geben Sie die Daten f\u00fcr Ihr Projekt unter den 3 Reitern Details , Technische Daten , Mets Parameter ein. Klicken Sie anschlie\u00dfend auf \" Speichern \". Das neu angelegte Projekt erscheint nun auf der Seite Projekte in der Projektliste . Einen Workflow f\u00fcr das Projekt erstellen Um einen neuen Workflow zu erstellen, klicken Sie auf den Button \" Neu + \" und anschlie\u00dfend auf \" + Neuer Workflow \" Sie gelangen auf die Seite \" Neuen Workflow anlegen \". Geben Sie dort zuerst den Titel f\u00fcr den Workflow ein. Nun k\u00f6nnen Sie mit den Symbolen auf der linken Seiten Ihren Workflo erstellen. Ziehen Sie dies Symbole einfach in die entsprechende Reihenfolge und Position. Achten Sie dabei darauf, dass immer Verbindungen zwischen den Symbolen vorhanden sind. Klicken Sie dazu auf das jeweilige Symbol und w\u00e4hlen die Verbindung aus und klicken auf das folgende Symbol. Durch einen Doppelklick auf das entsprechende Symbol k\u00f6nnen Sie diesen Namen geben und anschlie\u00dfend weitere Eigenschaften und Berechtigungen festlegen Wenn Sie alle Eingaben vorgenommen haben, w\u00e4hlen Sie den Status \" Aktiv \" aus und klicken Sie auf \" Speichern \". Anschlie\u00dfend wird Ihr erstellter Workflow unter dem Reiter \" Workflows \" angezeigt. Eine Produktionsvorlage erstellen Um eine neue Produktionsvorlage zu erstellen, klicken Sie auf den Button \" Neu + \" und anschlie\u00dfend auf \" + Neue Produktionsvorlage \". Anschlie\u00dfend gelangen Sie auf die Seite \" Neue Produktionsvorlage \". Geben Sie dort zuerst den Titel f\u00fcr die neue Produktionsvorlage ein. W\u00e4hlen Sie nun ein Projekt, einen Workflow , einen Regelsatz und einen Laufzettel f\u00fcr die Produktionsvorlage aus. Klicken Sie anschlie\u00dfend auf \" Speichern \". Ihre neue Produktionsvorlage wird nun unter dem Reiter Produktionsvorlagen angezeigt. Eine Produktionsvorlage f\u00fcr das Projekt ausw\u00e4hlen Nachdem nun Projekt, Workflow und Produktionsvorlage erstellt sind, muss (falls noch nicht geschehen) f\u00fcr das neue Projekt noch die Produktionsvorlage ausgew\u00e4hlt werden: Klicken Sie im Bereich Projekte auf die Projektliste . Klicken Sie neben dem jeweiligen Projekt auf die Aktion \" Bearbeiten . Klicken Sie auf den Reiter Produktionsvorlagen und entsperren Sie das Projekt, indem Sie auf den Button \" Gesperrt \" klicken. Klicken Sie nun auf den Button \" Produktionsvorlage hinzuf\u00fcgen \". W\u00e4hlen Sie nun eine Produktionsvorlage aus, indem Sie auf das \" + \" neben der gew\u00fcnschten Produktionsvorlage klicken. Die ausgew\u00e4hlte Produktionsvorlage erscheint nun in Ihrem Projekt unter dem Abschnitt Aufgabe . Schie\u00dfen Sie nun noch das Pop-up-Fenster indem Sie auf \" Schlie\u00dfen \" klicken. \" Speichern \" Sie anschlie\u00dfend Ihre \u00c4nderung an dem Projekt. Einen Vorgang anlegen Um einen neuen Vorgang anzulegen, klicken Sie in der Projektliste auf das Icon zum Ausklappen des jeweiligen Projekts. Nun klicken Sie auf das Icon \" einen Vorgang auf Basis dieser Produktionsvorlage anlegen \". Geben Sie unter den Reitern OPAC abfragen , Vorgangsdaten , Zus\u00e4tzliche Details und Suche die Daten f\u00fcr den Vorgang ein. Anschlie\u00dfend finden Sie den neuen Vorgang in der Vorgangsliste oder auf Ihrem Kitodo-Desktop .","title":"Das erste mal mit Kitodo arbeiten"},{"location":"user/introduction/#das-erste-mal-mit-kitodo-arbeiten","text":"Kitodo wird Ihnen bei der ersten Nutzung sowohl optisch als auch in der Benutzung anders vorkommen. Daher folgt hier eine kurze Zusammenfassung, welche die anf\u00e4ngliche Nutzung von Kitodo unterst\u00fctzen soll.","title":"Das erste Mal mit Kitodo arbeiten"},{"location":"user/introduction/#ein-projekt-ohne-produktionsvorlage-anlegen","text":"Als erstes m\u00fcssen Sie ein Projekt (falls noch nicht vorhanden) anlegen. Dazu klicken Sie im \" Dashboard \" auf \" Projekte \". Anschlie\u00dfend gelangen Sie auf die Seite Projekte . Dort klicken Sie auf den Button \" Neu \" und in der Schaltfl\u00e4che auf \" + Neues Projekt \". Auf der Seite Neues Projekt geben Sie die Daten f\u00fcr Ihr Projekt unter den 3 Reitern Details , Technische Daten , Mets Parameter ein. Klicken Sie anschlie\u00dfend auf \" Speichern \". Das neu angelegte Projekt erscheint nun auf der Seite Projekte in der Projektliste .","title":"Ein Projekt ohne Produktionsvorlage anlegen"},{"location":"user/introduction/#einen-workflow-fur-das-projekt-erstellen","text":"Um einen neuen Workflow zu erstellen, klicken Sie auf den Button \" Neu + \" und anschlie\u00dfend auf \" + Neuer Workflow \" Sie gelangen auf die Seite \" Neuen Workflow anlegen \". Geben Sie dort zuerst den Titel f\u00fcr den Workflow ein. Nun k\u00f6nnen Sie mit den Symbolen auf der linken Seiten Ihren Workflo erstellen. Ziehen Sie dies Symbole einfach in die entsprechende Reihenfolge und Position. Achten Sie dabei darauf, dass immer Verbindungen zwischen den Symbolen vorhanden sind. Klicken Sie dazu auf das jeweilige Symbol und w\u00e4hlen die Verbindung aus und klicken auf das folgende Symbol. Durch einen Doppelklick auf das entsprechende Symbol k\u00f6nnen Sie diesen Namen geben und anschlie\u00dfend weitere Eigenschaften und Berechtigungen festlegen Wenn Sie alle Eingaben vorgenommen haben, w\u00e4hlen Sie den Status \" Aktiv \" aus und klicken Sie auf \" Speichern \". Anschlie\u00dfend wird Ihr erstellter Workflow unter dem Reiter \" Workflows \" angezeigt.","title":"Einen Workflow f\u00fcr das Projekt erstellen"},{"location":"user/introduction/#eine-produktionsvorlage-erstellen","text":"Um eine neue Produktionsvorlage zu erstellen, klicken Sie auf den Button \" Neu + \" und anschlie\u00dfend auf \" + Neue Produktionsvorlage \". Anschlie\u00dfend gelangen Sie auf die Seite \" Neue Produktionsvorlage \". Geben Sie dort zuerst den Titel f\u00fcr die neue Produktionsvorlage ein. W\u00e4hlen Sie nun ein Projekt, einen Workflow , einen Regelsatz und einen Laufzettel f\u00fcr die Produktionsvorlage aus. Klicken Sie anschlie\u00dfend auf \" Speichern \". Ihre neue Produktionsvorlage wird nun unter dem Reiter Produktionsvorlagen angezeigt.","title":"Eine Produktionsvorlage erstellen"},{"location":"user/introduction/#eine-produktionsvorlage-fur-das-projekt-auswahlen","text":"Nachdem nun Projekt, Workflow und Produktionsvorlage erstellt sind, muss (falls noch nicht geschehen) f\u00fcr das neue Projekt noch die Produktionsvorlage ausgew\u00e4hlt werden: Klicken Sie im Bereich Projekte auf die Projektliste . Klicken Sie neben dem jeweiligen Projekt auf die Aktion \" Bearbeiten . Klicken Sie auf den Reiter Produktionsvorlagen und entsperren Sie das Projekt, indem Sie auf den Button \" Gesperrt \" klicken. Klicken Sie nun auf den Button \" Produktionsvorlage hinzuf\u00fcgen \". W\u00e4hlen Sie nun eine Produktionsvorlage aus, indem Sie auf das \" + \" neben der gew\u00fcnschten Produktionsvorlage klicken. Die ausgew\u00e4hlte Produktionsvorlage erscheint nun in Ihrem Projekt unter dem Abschnitt Aufgabe . Schie\u00dfen Sie nun noch das Pop-up-Fenster indem Sie auf \" Schlie\u00dfen \" klicken. \" Speichern \" Sie anschlie\u00dfend Ihre \u00c4nderung an dem Projekt.","title":"Eine Produktionsvorlage f\u00fcr das Projekt ausw\u00e4hlen"},{"location":"user/introduction/#einen-vorgang-anlegen","text":"Um einen neuen Vorgang anzulegen, klicken Sie in der Projektliste auf das Icon zum Ausklappen des jeweiligen Projekts. Nun klicken Sie auf das Icon \" einen Vorgang auf Basis dieser Produktionsvorlage anlegen \". Geben Sie unter den Reitern OPAC abfragen , Vorgangsdaten , Zus\u00e4tzliche Details und Suche die Daten f\u00fcr den Vorgang ein. Anschlie\u00dfend finden Sie den neuen Vorgang in der Vorgangsliste oder auf Ihrem Kitodo-Desktop .","title":"Einen Vorgang anlegen"},{"location":"user/introduction/actions/","text":"Aktionen Aktionen sind in diesem Abschnitt definiert als Befehle, die ausgel\u00f6st werden k\u00f6nnen und die eine Auswirkung nach sich ziehen. In diesem Abschnitt werden die Aktionen mit den jeweiligen Schaltfl\u00e4chen, durch die sie ausgel\u00f6st werden, vorgestellt. Somit kann der Abschnitt auch genutzt werden, um Unklarheiten hinsichtlich der Interpretation der Symbole zu beseitigen. Globale Aktionen: Die globalen Aktionen erscheinen in allen Bereichen von Kitodo.Production und sollen im Folgenden dargestellt und beschrieben werden: Bearbeiten L\u00f6schen Duplizieren Anzeigen Archivieren EINS STATISTIK? Spezifische Aktionen: Bearbeitungsstatus hochsetzen Bearbeitungsstatus runtersetzen Im Homeverzeichnis verlinken Verlinkung aus Homeverzeichnis entfernen Export DMS Exceldatei erzeugen PDF erzeugen","title":"Aktionen"},{"location":"user/introduction/actions/#aktionen","text":"Aktionen sind in diesem Abschnitt definiert als Befehle, die ausgel\u00f6st werden k\u00f6nnen und die eine Auswirkung nach sich ziehen. In diesem Abschnitt werden die Aktionen mit den jeweiligen Schaltfl\u00e4chen, durch die sie ausgel\u00f6st werden, vorgestellt. Somit kann der Abschnitt auch genutzt werden, um Unklarheiten hinsichtlich der Interpretation der Symbole zu beseitigen.","title":"Aktionen"},{"location":"user/introduction/actions/#globale-aktionen","text":"Die globalen Aktionen erscheinen in allen Bereichen von Kitodo.Production und sollen im Folgenden dargestellt und beschrieben werden: Bearbeiten L\u00f6schen Duplizieren Anzeigen Archivieren EINS STATISTIK?","title":"Globale Aktionen:"},{"location":"user/introduction/actions/#spezifische-aktionen","text":"Bearbeitungsstatus hochsetzen Bearbeitungsstatus runtersetzen Im Homeverzeichnis verlinken Verlinkung aus Homeverzeichnis entfernen Export DMS Exceldatei erzeugen PDF erzeugen","title":"Spezifische Aktionen:"},{"location":"user/introduction/application_notes/","text":"Anwendungshinweise und Weiteres","title":"Anwendungshinweise und Weiteres"},{"location":"user/introduction/application_notes/#anwendungshinweise-und-weiteres","text":"","title":"Anwendungshinweise und Weiteres"},{"location":"user/introduction/batches/","text":"Batches","title":"Batches"},{"location":"user/introduction/batches/#batches","text":"","title":"Batches"},{"location":"user/introduction/first_time/","text":"","title":"First time"},{"location":"user/introduction/gettingstarteduser/","text":"GettingStarted Wie l\u00e4uft die Installation von Kitodo ab?","title":"Getting Started"},{"location":"user/introduction/gettingstarteduser/#gettingstarted","text":"","title":"GettingStarted"},{"location":"user/introduction/gettingstarteduser/#wie-lauft-die-installation-von-kitodo-ab","text":"","title":"Wie l\u00e4uft die Installation von Kitodo ab?"},{"location":"user/introduction/homedirectory/","text":"Homeverzeichnis Jeder Benutzer in Kitodo.Production verf\u00fcgt \u00fcber ein Homeverzeichnis. Dies ist ein Verzeichnis auf dem Server, das nur mit den Logindaten des Benutzers erreicht werden kann. Wenn die Adresse bekannt ist, l\u00e4sst sich dieses Verzeichnis \u00fcber den Windows-Explorer oder gleichwertige Programme erreichen. Die Verlinkung mit dem Homeverzeichnis erm\u00f6glicht es, dass die Images eines Vorgangs eingef\u00fcgt/gel\u00f6scht/bearbeitet werden k\u00f6nnen. In der Vorgangsliste , k\u00f6nnen \u00fcber die Aktionen des nach unten oder oben zeigenden Pfeils die Verlinkung hergestellt, bzw. entfernt werden.","title":"Homeverzeichnis"},{"location":"user/introduction/homedirectory/#homeverzeichnis","text":"Jeder Benutzer in Kitodo.Production verf\u00fcgt \u00fcber ein Homeverzeichnis. Dies ist ein Verzeichnis auf dem Server, das nur mit den Logindaten des Benutzers erreicht werden kann. Wenn die Adresse bekannt ist, l\u00e4sst sich dieses Verzeichnis \u00fcber den Windows-Explorer oder gleichwertige Programme erreichen. Die Verlinkung mit dem Homeverzeichnis erm\u00f6glicht es, dass die Images eines Vorgangs eingef\u00fcgt/gel\u00f6scht/bearbeitet werden k\u00f6nnen. In der Vorgangsliste , k\u00f6nnen \u00fcber die Aktionen des nach unten oder oben zeigenden Pfeils die Verlinkung hergestellt, bzw. entfernt werden.","title":"Homeverzeichnis"},{"location":"user/introduction/process/","text":"Vorgang Mit einer Produktionsvorlage werden in Kitodo.Production bibliografische Metadaten eines Titels den Aufgaben zugewiesen, die ben\u00f6tigt werden, um das Digitalisat zu erstellen. Dieses Konstrukt wird Vorgang genannt. In einen Vorgang k\u00f6nnen unter anderem folgende Daten integriert werden: Metadaten (Titeldaten, Strukturdaten) Images OCR Somit werden in einem Vorgang inhaltliche, beschreibende und administrative Daten eines digitalen Dokuments zusammengef\u00fchrt. Ein Vorgang hat immer einen Titel (den Vorgangstitel), der in der Regel aus einem Titelschl\u00fcssel und einer ID-Nummer besteht, zum Beispiel: dreskuiml_351326405. Es k\u00f6nnen auch weitere Angaben hinzugef\u00fcgt werden, wie zum Beispiel _0002, falls eine Bandnummer im Vorgangstitel abgebildet werden soll. So legen Sie einen Vorgang an Um einen neuen Vorgang anzulegen, klicken Sie in der Projektliste auf das Icon zum Ausklappen des jeweiligen Projekts. Nun klicken Sie auf das Icon \" Einen Vorgang auf Basis dieser Produktionsvorlage anlegen \". Geben Sie unter den Reitern OPAC abfragen , Vorgangsdaten , Zus\u00e4tzliche Details und Suche die Daten f\u00fcr den Vorgang ein. Anschlie\u00dfend finden Sie den neuen Vorgang in der Vorgangsliste oder auf Ihrem Kitodo-Desktop .","title":"Vorgang"},{"location":"user/introduction/process/#vorgang","text":"Mit einer Produktionsvorlage werden in Kitodo.Production bibliografische Metadaten eines Titels den Aufgaben zugewiesen, die ben\u00f6tigt werden, um das Digitalisat zu erstellen. Dieses Konstrukt wird Vorgang genannt. In einen Vorgang k\u00f6nnen unter anderem folgende Daten integriert werden: Metadaten (Titeldaten, Strukturdaten) Images OCR Somit werden in einem Vorgang inhaltliche, beschreibende und administrative Daten eines digitalen Dokuments zusammengef\u00fchrt. Ein Vorgang hat immer einen Titel (den Vorgangstitel), der in der Regel aus einem Titelschl\u00fcssel und einer ID-Nummer besteht, zum Beispiel: dreskuiml_351326405. Es k\u00f6nnen auch weitere Angaben hinzugef\u00fcgt werden, wie zum Beispiel _0002, falls eine Bandnummer im Vorgangstitel abgebildet werden soll.","title":"Vorgang"},{"location":"user/introduction/process/#so-legen-sie-einen-vorgang-an","text":"Um einen neuen Vorgang anzulegen, klicken Sie in der Projektliste auf das Icon zum Ausklappen des jeweiligen Projekts. Nun klicken Sie auf das Icon \" Einen Vorgang auf Basis dieser Produktionsvorlage anlegen \". Geben Sie unter den Reitern OPAC abfragen , Vorgangsdaten , Zus\u00e4tzliche Details und Suche die Daten f\u00fcr den Vorgang ein. Anschlie\u00dfend finden Sie den neuen Vorgang in der Vorgangsliste oder auf Ihrem Kitodo-Desktop .","title":"So legen Sie einen Vorgang an"},{"location":"user/introduction/processslip/","text":"Laufzettel Ein Laufzettel beinhaltet die wichtigsten Informationen eines Vorgangs (Vorgangstitel, Signatur, ...). In Kitodo.Production besteht die M\u00f6glichkeit, nach dem Anlegen eines Vorgangs den dazugeh\u00f6rigen Laufzettel auszudrucken. Der Laufzettel muss jedoch zuvor beim Anlegen einer Produktionsvorlage ausgew\u00e4hlt werden. Laufzettel f\u00fcr Produktionsvorlage ausw\u00e4hlen Beim Erstellen einer Produktionsvorlage, muss ein dazugeh\u00f6riger Laufzettel ausgew\u00e4hlt werden. Dieser Laufzettel wird dann f\u00fcr die Vorg\u00e4nge, welche die Produktionsvorlage verwenden, \u00fcbernommen. Konfiguration des Laufzettels Das Layout oder die Inhalte des Laufzettels k\u00f6nnen in Kitodo.Production nicht bearbeitet werden. Die Laufzettelvorlagen werden im Hintergrund gespeichert und k\u00f6nnen in Kitodo.Production in dem Bereich Projekte unter dem Reiter Laufzettel angezeigt werden: Laufzettel drucken Es gibt die M\u00f6glichkeit, den Druck von Laufzetteln in Kitodo.Production auszul\u00f6sen. In der Vorgangsliste befindet sich in jeder Zeile zu einem Vorgang das Icon zum Ausdrucken des jeweiligen Laufzettels.","title":"Laufzettel"},{"location":"user/introduction/processslip/#laufzettel","text":"Ein Laufzettel beinhaltet die wichtigsten Informationen eines Vorgangs (Vorgangstitel, Signatur, ...). In Kitodo.Production besteht die M\u00f6glichkeit, nach dem Anlegen eines Vorgangs den dazugeh\u00f6rigen Laufzettel auszudrucken. Der Laufzettel muss jedoch zuvor beim Anlegen einer Produktionsvorlage ausgew\u00e4hlt werden.","title":"Laufzettel"},{"location":"user/introduction/processslip/#laufzettel-fur-produktionsvorlage-auswahlen","text":"Beim Erstellen einer Produktionsvorlage, muss ein dazugeh\u00f6riger Laufzettel ausgew\u00e4hlt werden. Dieser Laufzettel wird dann f\u00fcr die Vorg\u00e4nge, welche die Produktionsvorlage verwenden, \u00fcbernommen.","title":"Laufzettel f\u00fcr Produktionsvorlage ausw\u00e4hlen"},{"location":"user/introduction/processslip/#konfiguration-des-laufzettels","text":"Das Layout oder die Inhalte des Laufzettels k\u00f6nnen in Kitodo.Production nicht bearbeitet werden. Die Laufzettelvorlagen werden im Hintergrund gespeichert und k\u00f6nnen in Kitodo.Production in dem Bereich Projekte unter dem Reiter Laufzettel angezeigt werden:","title":"Konfiguration des Laufzettels"},{"location":"user/introduction/processslip/#laufzettel-drucken","text":"Es gibt die M\u00f6glichkeit, den Druck von Laufzetteln in Kitodo.Production auszul\u00f6sen. In der Vorgangsliste befindet sich in jeder Zeile zu einem Vorgang das Icon zum Ausdrucken des jeweiligen Laufzettels.","title":"Laufzettel drucken"},{"location":"user/introduction/productiontemplate/","text":"Prduktionsvorlage Eine Produktionsvorlage ist ein vorgefertigtes Muster, das alle geplanten Aufgaben in einer definierten Reihenfolge (zum Beispiel: Anlegen, Scannen, Metadaten, OCR, Export) enth\u00e4lt. Wenn ein Titeldatensatz eines Digitalisats importiert wird, werden diesem automatisch alle Aufgaben in dieser Reihenfolge zugeordnet. Man erspart sich hierdurch das Zusammenstellen der verschiedenen Aufgaben bei jedem neuen Titel. Das Produkt ist der sogenannte Vorgang. Einer Produktionsvorlage muss immer ein Projekt zugewiesen werden. Diesem Projekt werden alle Vorg\u00e4nge zugeordnet, die mit der Vorlage angelegt werden. Beispiel Hier ist ersichtlich, dass eine Produktionsvorlage aus mehreren Aufgaben besteht und einem Projekt zugeordnet ist.","title":"Prduktionsvorlage"},{"location":"user/introduction/productiontemplate/#prduktionsvorlage","text":"Eine Produktionsvorlage ist ein vorgefertigtes Muster, das alle geplanten Aufgaben in einer definierten Reihenfolge (zum Beispiel: Anlegen, Scannen, Metadaten, OCR, Export) enth\u00e4lt. Wenn ein Titeldatensatz eines Digitalisats importiert wird, werden diesem automatisch alle Aufgaben in dieser Reihenfolge zugeordnet. Man erspart sich hierdurch das Zusammenstellen der verschiedenen Aufgaben bei jedem neuen Titel. Das Produkt ist der sogenannte Vorgang. Einer Produktionsvorlage muss immer ein Projekt zugewiesen werden. Diesem Projekt werden alle Vorg\u00e4nge zugeordnet, die mit der Vorlage angelegt werden.","title":"Prduktionsvorlage"},{"location":"user/introduction/productiontemplate/#beispiel","text":"Hier ist ersichtlich, dass eine Produktionsvorlage aus mehreren Aufgaben besteht und einem Projekt zugeordnet ist.","title":"Beispiel"},{"location":"user/introduction/project/","text":"Projekte Projekte werden in Kitodo.Production zur Prozessverwaltung erstellt. Sie haben ihren Ursprung in der \"realen\" Projektorganisation, in der bestimmte Benutzer nur an Projekten arbeiten, in denen sie geschult sind. Zudem lassen sich Projekte besser statistisch und organisatorisch verwalten. Ein Kriterium ist h\u00e4ufig der Projektantrag f\u00fcr Drittmittel. Die dort beschriebenen Arbeitsabl\u00e4ufe und Ziele k\u00f6nnen sehr gut als Richtlinie genutzt werden, um ein Projekt (Best\u00e4nde, Benutzer) zu definieren. Durch Projekte lassen sich die Zugriffsrechte der Benutzer steuern. So k\u00f6nnen bestimmte Benutzer f\u00fcr die Bearbeitung der Vorg\u00e4nge innerhalb eines Projekts frei geschaltet werden. Zudem sehen Benutzer nur die Vorg\u00e4nge, die sie auch wirklich bearbeiten m\u00fcssen und werden nicht mit den restlichen Vorg\u00e4ngen \u00fcberflutet. Durch Projekte l\u00e4sst sich die Statistik einfacher erstellen, da die Vorg\u00e4nge eines Projekts gefiltert werden k\u00f6nnen. Dies ist eine wichtige Voraussetzung, um zum Beispiel den Bearbeitungsstand der Vorg\u00e4nge eines Projekts, bzw. um die Anzahl der Images, oder der Strukturdaten zu ermitteln. Es sollte jedoch auch bedacht werden, dass viele Projekte den Verwaltungsaufwand erh\u00f6hen. Deshalb sollte man hier gut \u00fcberlegen, wie viele Projekte verwendet werden. Anlegen von Projekten Um ein Projekt anzulegen, klicken Sie im \" Dashboard \" auf \" Projekte \". Anschlie\u00dfend gelangen Sie auf die Seite Projekte . Dort klicken Sie auf den Button \" Neu \" und in der Schaltfl\u00e4che auf \" + Neues Projekt \". Auf der Seite Neues Projekt geben Sie die Daten f\u00fcr Ihr Projekt unter den 3 Reitern Details , Technische Daten , Mets Parameter ein. W\u00e4hlen Sie eine Produktionsvorlage aus, indem Sie auf den Button \" Produktionsvorlage ausw\u00e4hlen \" klicken. Klicken Sie anschlie\u00dfend auf \" Speichern \". Das neu angelegte Projekt erscheint nun auf der Seite Projekte in der Projektliste .","title":"Projekte"},{"location":"user/introduction/project/#projekte","text":"Projekte werden in Kitodo.Production zur Prozessverwaltung erstellt. Sie haben ihren Ursprung in der \"realen\" Projektorganisation, in der bestimmte Benutzer nur an Projekten arbeiten, in denen sie geschult sind. Zudem lassen sich Projekte besser statistisch und organisatorisch verwalten. Ein Kriterium ist h\u00e4ufig der Projektantrag f\u00fcr Drittmittel. Die dort beschriebenen Arbeitsabl\u00e4ufe und Ziele k\u00f6nnen sehr gut als Richtlinie genutzt werden, um ein Projekt (Best\u00e4nde, Benutzer) zu definieren. Durch Projekte lassen sich die Zugriffsrechte der Benutzer steuern. So k\u00f6nnen bestimmte Benutzer f\u00fcr die Bearbeitung der Vorg\u00e4nge innerhalb eines Projekts frei geschaltet werden. Zudem sehen Benutzer nur die Vorg\u00e4nge, die sie auch wirklich bearbeiten m\u00fcssen und werden nicht mit den restlichen Vorg\u00e4ngen \u00fcberflutet. Durch Projekte l\u00e4sst sich die Statistik einfacher erstellen, da die Vorg\u00e4nge eines Projekts gefiltert werden k\u00f6nnen. Dies ist eine wichtige Voraussetzung, um zum Beispiel den Bearbeitungsstand der Vorg\u00e4nge eines Projekts, bzw. um die Anzahl der Images, oder der Strukturdaten zu ermitteln. Es sollte jedoch auch bedacht werden, dass viele Projekte den Verwaltungsaufwand erh\u00f6hen. Deshalb sollte man hier gut \u00fcberlegen, wie viele Projekte verwendet werden.","title":"Projekte"},{"location":"user/introduction/project/#anlegen-von-projekten","text":"Um ein Projekt anzulegen, klicken Sie im \" Dashboard \" auf \" Projekte \". Anschlie\u00dfend gelangen Sie auf die Seite Projekte . Dort klicken Sie auf den Button \" Neu \" und in der Schaltfl\u00e4che auf \" + Neues Projekt \". Auf der Seite Neues Projekt geben Sie die Daten f\u00fcr Ihr Projekt unter den 3 Reitern Details , Technische Daten , Mets Parameter ein. W\u00e4hlen Sie eine Produktionsvorlage aus, indem Sie auf den Button \" Produktionsvorlage ausw\u00e4hlen \" klicken. Klicken Sie anschlie\u00dfend auf \" Speichern \". Das neu angelegte Projekt erscheint nun auf der Seite Projekte in der Projektliste .","title":"Anlegen von Projekten"},{"location":"user/introduction/tasks/","text":"Aufgaben Eine wichtige Grundlage ist die Definition der Aktionen, die innerhalb eines Workflows ausgef\u00fchrt werden sollen. Dies wird in Kitodo.Production Aufgabe genannt und benennt zum einen die Aktion die erf\u00fcllt werden soll. Zum anderen kann \u00fcber die Aufgaben auch geregelt werden, welche Benutzer bestimmte Aktionen durchf\u00fchren d\u00fcrfen/k\u00f6nnen. Zum Beispiel sollen bestimmte Benutzer nur f\u00fcr die Aufgaben Scannen zugelassen sein. Es k\u00f6nnen viele Aufgaben erstellt und zusammengestellt werden. Die wichtigsten sind: Anlegen eines Vorganges Scannen Erfassen der Meta- und Strukturdaten Export / Import in das DMS Es h\u00e4ngt nat\u00fcrlich von den Projektzielen ab, welche Aufgaben ben\u00f6tigt werden. Es hat sich jedoch best\u00e4tigt, dass diese vier Aufgaben ausreichen, um einen Workflow zu erstellen, mit dem pr\u00e4sentierbare Digitalisate erstellen werden k\u00f6nnen. Je nach Projektziel k\u00f6nnen auch beliebige andere erstellt werden, wie zum Beispiel: OCR Qualit\u00e4tskontrolle Nachbearbeitung Jede Aufgabe kann einen von vier Status annehmen und muss mindestens einer Benutzergruppe zugeordnet sein. Dies ist notwendig, um die Zugriffsberechtigung f\u00fcr die Schritte zu erm\u00f6glichen. Weitere Informationen zur Bearbeitung, bzw. zum Erstellen von Aufgaben finden sich unter Bearbeitung Aufgabe. Zum Beispiel: Aufgaben Anwendungsf\u00e4lle SLUB In der SLUB werden haupts\u00e4chlich folgende Aufgaben verwendet: Anlegen eines Vorganges Scannen LZA Validierung Erfassen der Meta- und Strukturdaten OCR Export / Import in das DMS OCR wird nur bei bestimmten Projekten verwendet. Wenn eine OCR nicht geplant ist (zum Beispiel bei Handschriften), wird die Aufgabe nicht vergeben.","title":"Aufgaben"},{"location":"user/introduction/tasks/#aufgaben","text":"Eine wichtige Grundlage ist die Definition der Aktionen, die innerhalb eines Workflows ausgef\u00fchrt werden sollen. Dies wird in Kitodo.Production Aufgabe genannt und benennt zum einen die Aktion die erf\u00fcllt werden soll. Zum anderen kann \u00fcber die Aufgaben auch geregelt werden, welche Benutzer bestimmte Aktionen durchf\u00fchren d\u00fcrfen/k\u00f6nnen. Zum Beispiel sollen bestimmte Benutzer nur f\u00fcr die Aufgaben Scannen zugelassen sein. Es k\u00f6nnen viele Aufgaben erstellt und zusammengestellt werden. Die wichtigsten sind: Anlegen eines Vorganges Scannen Erfassen der Meta- und Strukturdaten Export / Import in das DMS Es h\u00e4ngt nat\u00fcrlich von den Projektzielen ab, welche Aufgaben ben\u00f6tigt werden. Es hat sich jedoch best\u00e4tigt, dass diese vier Aufgaben ausreichen, um einen Workflow zu erstellen, mit dem pr\u00e4sentierbare Digitalisate erstellen werden k\u00f6nnen. Je nach Projektziel k\u00f6nnen auch beliebige andere erstellt werden, wie zum Beispiel: OCR Qualit\u00e4tskontrolle Nachbearbeitung Jede Aufgabe kann einen von vier Status annehmen und muss mindestens einer Benutzergruppe zugeordnet sein. Dies ist notwendig, um die Zugriffsberechtigung f\u00fcr die Schritte zu erm\u00f6glichen. Weitere Informationen zur Bearbeitung, bzw. zum Erstellen von Aufgaben finden sich unter Bearbeitung Aufgabe. Zum Beispiel: Aufgaben Anwendungsf\u00e4lle SLUB In der SLUB werden haupts\u00e4chlich folgende Aufgaben verwendet: Anlegen eines Vorganges Scannen LZA Validierung Erfassen der Meta- und Strukturdaten OCR Export / Import in das DMS OCR wird nur bei bestimmten Projekten verwendet. Wenn eine OCR nicht geplant ist (zum Beispiel bei Handschriften), wird die Aufgabe nicht vergeben.","title":"Aufgaben"},{"location":"user/introduction/user/","text":"Benutzer Um Kitodo.Production nutzen zu k\u00f6nnen, muss eine Person als Benutzer im System registriert sein. Jedem Benutzer muss zudem mindestens ein Projekt und mindestens eine Benutzergruppe (Scanner, Prozessverwaltung, Metadaten, \u2026) zugewiesen werden, damit er im System aktiv sein kann.","title":"Benutzer"},{"location":"user/introduction/user/#benutzer","text":"Um Kitodo.Production nutzen zu k\u00f6nnen, muss eine Person als Benutzer im System registriert sein. Jedem Benutzer muss zudem mindestens ein Projekt und mindestens eine Benutzergruppe (Scanner, Prozessverwaltung, Metadaten, \u2026) zugewiesen werden, damit er im System aktiv sein kann.","title":"Benutzer"},{"location":"user/introduction/user_documentation/","text":"Dokumentationen der Anwenderbibliotheken Die auf dieser Seite aufgelisteten Bibliotheken haben ihre Anwenderdokumentation bereitgestellt, um die Flexibilit\u00e4t und den Gestaltungsfreiraum von Kitodo.Production zu vermitteln. Die Anwenderdokumentationen bieten zudem Einblicke in die jeweilige Nutzung von Kitodo.Production in den Bibliotheken. Die Dokumentationen beziehen sich noch auf die vorherige Version von Kitodo.Production und werden nach und nach aktualisiert. S\u00e4chsische Landesbibliothek - Staats- und Universit\u00e4tsbibliothek Dresden Staats- und Universit\u00e4tsbibliothek Hamburg Carl von Ossietzky Staatsbibliothek zu Berlin - Preu\u00dfischer Kulturbesitz Universit\u00e4tsbibliothek Mannheim W\u00fcrttembergische Landesbibliothek Stuttgart","title":"Dokumentationen der Anwenderbibliotheken"},{"location":"user/introduction/user_documentation/#dokumentationen-der-anwenderbibliotheken","text":"Die auf dieser Seite aufgelisteten Bibliotheken haben ihre Anwenderdokumentation bereitgestellt, um die Flexibilit\u00e4t und den Gestaltungsfreiraum von Kitodo.Production zu vermitteln. Die Anwenderdokumentationen bieten zudem Einblicke in die jeweilige Nutzung von Kitodo.Production in den Bibliotheken. Die Dokumentationen beziehen sich noch auf die vorherige Version von Kitodo.Production und werden nach und nach aktualisiert. S\u00e4chsische Landesbibliothek - Staats- und Universit\u00e4tsbibliothek Dresden Staats- und Universit\u00e4tsbibliothek Hamburg Carl von Ossietzky Staatsbibliothek zu Berlin - Preu\u00dfischer Kulturbesitz Universit\u00e4tsbibliothek Mannheim W\u00fcrttembergische Landesbibliothek Stuttgart","title":"Dokumentationen der Anwenderbibliotheken"},{"location":"user/introduction/using/","text":"Using In dieser Dokumentation werden alle relevanten Informationen f\u00fcr die Anwender von Kitodo.Production verzeichnet. Neben den Informationen \u00fcber die Bestandteile und Funktionen von Kitodo.Production werden auch die Zusammenh\u00e4nge und Abl\u00e4ufe, insbesondere die Arbeitsabl\u00e4ufe im Metadateneditor dargestellt. Hierzu wurden vier Bereiche erstellt: Grundlegende Eigenschaften von Kitodo.Production: In diesem Abschnitt werden grundlegende Elemente erl\u00e4utert, deren Kenntnis n\u00f6tig ist, um mit Kitodo.Production arbeiten zu k\u00f6nnen. Projektorganisation mit Kitodo.Production: In diesem Abschnitt werden Informationen verzeichnet, die n\u00f6tig sind, um ein Projekt in Kitodo.Production zu erstellen. Anleitung f\u00fcr Kitodo.Production: In diesem Abschnitt werden die Arbeitsschritte beschrieben, die n\u00f6tig sind, um ein Digitalisat zu erstellen. Administrative Aufgaben in Kitodo.Production: In diesem Abschnitt werden die wichtigsten administrativen Aufgaben beschrieben. Ziele und Zielgruppen Die Hauptfunktion von Kitodo.Production ist die Bearbeitung der Digitalisate, so dass Images und Metadaten zusammengef\u00fchrt werden, um eine sinnvolle Pr\u00e4sentation zu erm\u00f6glichen. Um diese Bearbeitung effektiv zu gestalten, sind administrative Funktionen wie zum Beispiel Nutzerverwaltung notwendig. F\u00fcr bibliothekarische Anwender ist somit der Abschnitt Anleitung Kitodo.Production , in dem alle Abl\u00e4ufe zur Metadatenanreicherung beschrieben sind das Kernst\u00fcck dieser Anleitung. F\u00fcr Personen, deren Aufgabe auch die administrative Betreuung von Kitodo.Production beinhaltet, ist der Abschnitt Administrative Aufgaben zus\u00e4tzlich von hoher Bedeutung. Beiden Gruppen d\u00fcrften die beiden ersten Abschnitte dabei helfen, den grunds\u00e4tzlichen Aufbau von Kitodo.Production und dessen grunds\u00e4tzlichen Funktionalit\u00e4ten zu verstehen. Grundlegende Eigenschaften Kitodo.Production dient der Workflowgestaltung und -steuerung von Digitalisierungsprozessen und der Nutzeradministration aller beteiligten registrierten Anwender. Bevor in sp\u00e4teren Abschnitten die Arbeitsabl\u00e4ufe und administrative Aufgaben erl\u00e4utert werden, sollen in diesem Abschnitt einige grundlegende Bestandteile und Benennungen erl\u00e4utert werden. Aktionen Aufgaben Benutzer Digitale Kollektionen Homeverzeichnis Laufzettel Produktionsvorlage Projekt Rollen Status der Aufgaben Suche und Filtern Vorgang Vorgangsdetails Vorgangsdetails Physische Vorlagen Vorgangsdetails Werkst\u00fcckeigenschaft","title":"Anwenderdokumentation"},{"location":"user/introduction/using/#using","text":"In dieser Dokumentation werden alle relevanten Informationen f\u00fcr die Anwender von Kitodo.Production verzeichnet. Neben den Informationen \u00fcber die Bestandteile und Funktionen von Kitodo.Production werden auch die Zusammenh\u00e4nge und Abl\u00e4ufe, insbesondere die Arbeitsabl\u00e4ufe im Metadateneditor dargestellt. Hierzu wurden vier Bereiche erstellt: Grundlegende Eigenschaften von Kitodo.Production: In diesem Abschnitt werden grundlegende Elemente erl\u00e4utert, deren Kenntnis n\u00f6tig ist, um mit Kitodo.Production arbeiten zu k\u00f6nnen. Projektorganisation mit Kitodo.Production: In diesem Abschnitt werden Informationen verzeichnet, die n\u00f6tig sind, um ein Projekt in Kitodo.Production zu erstellen. Anleitung f\u00fcr Kitodo.Production: In diesem Abschnitt werden die Arbeitsschritte beschrieben, die n\u00f6tig sind, um ein Digitalisat zu erstellen. Administrative Aufgaben in Kitodo.Production: In diesem Abschnitt werden die wichtigsten administrativen Aufgaben beschrieben.","title":"Using"},{"location":"user/introduction/using/#ziele-und-zielgruppen","text":"Die Hauptfunktion von Kitodo.Production ist die Bearbeitung der Digitalisate, so dass Images und Metadaten zusammengef\u00fchrt werden, um eine sinnvolle Pr\u00e4sentation zu erm\u00f6glichen. Um diese Bearbeitung effektiv zu gestalten, sind administrative Funktionen wie zum Beispiel Nutzerverwaltung notwendig. F\u00fcr bibliothekarische Anwender ist somit der Abschnitt Anleitung Kitodo.Production , in dem alle Abl\u00e4ufe zur Metadatenanreicherung beschrieben sind das Kernst\u00fcck dieser Anleitung. F\u00fcr Personen, deren Aufgabe auch die administrative Betreuung von Kitodo.Production beinhaltet, ist der Abschnitt Administrative Aufgaben zus\u00e4tzlich von hoher Bedeutung. Beiden Gruppen d\u00fcrften die beiden ersten Abschnitte dabei helfen, den grunds\u00e4tzlichen Aufbau von Kitodo.Production und dessen grunds\u00e4tzlichen Funktionalit\u00e4ten zu verstehen.","title":"Ziele und Zielgruppen"},{"location":"user/introduction/using/#grundlegende-eigenschaften","text":"Kitodo.Production dient der Workflowgestaltung und -steuerung von Digitalisierungsprozessen und der Nutzeradministration aller beteiligten registrierten Anwender. Bevor in sp\u00e4teren Abschnitten die Arbeitsabl\u00e4ufe und administrative Aufgaben erl\u00e4utert werden, sollen in diesem Abschnitt einige grundlegende Bestandteile und Benennungen erl\u00e4utert werden. Aktionen Aufgaben Benutzer Digitale Kollektionen Homeverzeichnis Laufzettel Produktionsvorlage Projekt Rollen Status der Aufgaben Suche und Filtern Vorgang Vorgangsdetails Vorgangsdetails Physische Vorlagen Vorgangsdetails Werkst\u00fcckeigenschaft","title":"Grundlegende Eigenschaften"}]}